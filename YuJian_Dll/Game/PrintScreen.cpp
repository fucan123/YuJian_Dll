#include "Game.h"
#include "PrintScreen.h"
#include "LookImgNum.h"
#include <shellapi.h>
#include <My/Common/C.h>
#include <My/Common/func.h>
#include <My/Common/OpenTextFile.h>
#include <My/Common/Explode.h>
#include <atlimage.h>
#include <stdio.h>

// ...
PrintScreen::PrintScreen(Game* p, const char* pixel_file)
{
	m_pGame = p;
	m_hShareMap = NULL;
	m_pShareBuffer = NULL;
	m_xScrn = GetSystemMetrics(SM_CXSCREEN);
	m_yScrn = GetSystemMetrics(SM_CYSCREEN);
	printf("屏幕分辨率:%d*%d\n", m_xScrn, m_yScrn);

	m_pLookImgNum = new LookImgNum;
	m_pBuffer = new char[m_xScrn * m_yScrn * 4];

	ZeroMemory(&m_GamePrintRect, sizeof(m_GamePrintRect));

	InitDC();
	if (pixel_file)
		ReadPixelConf(pixel_file);
#if 0
	LoadCompareImage(CIN_NoItem, L"C:\\Users\\fucan\\Desktop\\MNQ-9Star\\image\\NoItem.bmp");
	LoadCompareImage(CIN_YaoBao, L"C:\\Users\\fucan\\Desktop\\MNQ-9Star\\image\\YaoBao.bmp");
	LoadCompareImage(CIN_MoHun, L"C:\\Users\\fucan\\Desktop\\MNQ-9Star\\image\\MoHun.bmp");
#endif
}

// 读取像数配置
void PrintScreen::ReadPixelConf(const char * pixel_file)
{
	if (!pixel_file)
		return;

	printf("像数配置文件:%s\n", pixel_file);
	OpenTextFile file;
	if (!file.Open(pixel_file)) {
		printf("找不到'%s'文件！！！\n", pixel_file);
		return;
	}

	m_nComPixelCount = 0;
	COLORREF* tmp_pixels = new COLORREF[1024];
	char key[32] = { 0 };
	int width = 0, height = 0;
	int length = 0;
	char data[256];
	while ((length = file.GetLine(data, sizeof(data))) > -1) {
		if (length == 0) {
			continue;
		}

		Explode line(":", data);
		if (line.GetCount() > 1) {
			if (key[0] == 0) {
				strcpy(key, line[0]);
				//printf("读取%s开始\n", key);
			}
			else {
				//printf("读取%s结束 共有像数:%d 宽高:%d,%d\n\n", key, width*height, width, height);

				strcpy(m_ComPixels[m_nComPixelCount].Key, key);
				m_ComPixels[m_nComPixelCount].Width = width;
				m_ComPixels[m_nComPixelCount].Height = height;
				m_ComPixels[m_nComPixelCount].Pixels = new COLORREF[width * height];
				memcpy(m_ComPixels[m_nComPixelCount].Pixels, tmp_pixels, width*height*sizeof(COLORREF));
				m_nComPixelCount++;

				key[0] = 0;
				width = 0;
				height = 0;
				//break;
			}
		}
		else {
			if (key[0]) {
				Explode pixels(",", data);
				for (int i = 0; i < pixels.GetCount(); i++) {
					tmp_pixels[width * height + i] = pixels.GetValue2Int(i);
					//printf("%d:%08X.t, ", width * height + i, tmp_pixels[width * height + i]);
				}
				//printf("\n");
				
				width = pixels.GetCount();
				height++;
			}
		}
		
	}
	delete tmp_pixels;
	file.Close();

	printf("共配置像数信息数目:%d\n", m_nComPixelCount);
#if 0
	ComPixel* pComPixel = GetComPixel("星辰之眼");
	for (int j = 0; j < pComPixel->Height; j++) {
		for (int i = 0; i < pComPixel->Width; i++) {
			printf("%d:%08X, ", j * pComPixel->Width + i, pComPixel->Pixels[j * pComPixel->Width + i]);
		}
		printf("\n");
	}
#endif
}

// 获取ComPixel指针
ComPixel * PrintScreen::GetComPixel(const char * key)
{
	if (!key)
		return nullptr;

	for (int i = 0; i < m_nComPixelCount; i++) {
		//printf("%s=%s\n", m_ComPixels[i].Key, key);
		if (strcmp(m_ComPixels[i].Key, key) == 0)
			return &m_ComPixels[i];
	}
	return nullptr;
}

// 加载对比图片
void PrintScreen::LoadCompareImage(ComImgIndex index, wchar_t* path)
{
	CompareImageInfo* info = &m_ComImg[index];
	ZeroMemory(info, sizeof(CompareImageInfo));
	CImage img;

	if (SUCCEEDED(img.Load(path))) {
		info->Width = img.GetWidth();
		info->Height = img.GetHeight();
		info->Buffer = new COLORREF[info->Width * info->Height];

		for (int y = 0; y < info->Height; y++) {
			for (int x = 0; x < info->Width; x++) {
				info->Buffer[x + (y * info->Width)] = img.GetPixel(x, y) | 0xff000000;
				if (index == CIN_YaoBao) {
					//printf("%08X ", info->Buffer[x + (y * info->Width)]);
				}
					
			}
			if (index == CIN_YaoBao) {
				//printf("\n");
			}	
		}

		img.Destroy();
		printf("%ws:%d,%d\n", path, info->Width, info->Height);
	}
}

// 是否是注入opengl截图
bool PrintScreen::IsOpenglPs()
{
	return m_pShareBuffer && m_pShareBuffer->OK;
}

// 注入模拟器
void PrintScreen::InjectVBox(const char* path, DWORD pid)
{
	wchar_t log[256];
	wchar_t dll[256];
	wsprintfW(dll, L"%hs\\files\\opengl_ps.dll", path);
	if (!IsFileExist(dll)) {
		LOGVARN2(64, "red", L"files目录下不存在opengl_ps.dll文件");
		return;
	}

	m_hShareMap = ::CreateFileMapping(INVALID_HANDLE_VALUE, NULL, PAGE_READWRITE, 0, 
		sizeof(ShareReadPixelData), L"Share_Read_Pixel");
	if (!m_hShareMap) {
		m_pShareBuffer = nullptr;
		DbgPrint("CreateFileMapping失败(像数信息内存)\n");
		LOGVARP2(log, "red", L"CreateFileMapping失败(像数信息内存%d)", GetLastError());
		return;
	}
	// 映射对象的一个视图，得到指向共享内存的指针，设置里面的数据
	m_pShareBuffer = (ShareReadPixelData*)::MapViewOfFile(m_hShareMap, FILE_MAP_ALL_ACCESS, 0, 0, 0);
	// 初始化
	ZeroMemory(m_pShareBuffer, sizeof(ShareReadPixelData));
	BOOL result = InjectDll(pid, dll, L"opengl_ps.dll", TRUE);
	if (result) {
		LOGVARP2(log, "green b", L"注入模拟器渲染窗口成功");
	}
	else {
		LOGVARP2(log, "red b", L"注入模拟器渲染窗口失败");
		char cmd[256];
		sprintf_s(cmd, "/C %s\\files\\inui32.exe %d", path, pid);
		printf("调用inui32程序注入opengl_ps:%hs\n", cmd);
		LOGVARP2(log, "c0 b", L"调用inui32程序注入ui:%d\n", pid);
		//system(cmd);

		ShellExecuteA(NULL, "open", "cmd", cmd, NULL, SW_HIDE);
	}
}

// 初始化
void PrintScreen::InitDC()
{
#if 0
	//为屏幕创建设备描述表   
	m_hScrDC = CreateDC(L"DISPLAY", NULL, NULL, NULL);
	//为屏幕设备描述表创建兼容的内存设备描述表   
	m_hMemDC = CreateCompatibleDC(m_hScrDC);   //或者::CreateCompatibleDC(NULL)
#endif
	m_hDesktopWnd = GetDesktopWindow();
}

// 截图
HBITMAP PrintScreen::CopyScreenToBitmap(HWND hWnd, int start_x, int start_y, int end_x, int end_y, DWORD sleep_ms, bool del)
{
	RECT rect;
	::GetWindowRect(hWnd, &rect);
	int w = rect.right - rect.left, h = rect.bottom - rect.top;
	if (w <= 0 || h <= 0)
		return NULL;
	if (((end_x - start_x) <= 0) || ((end_y - start_y) <= 0))
		return NULL;

	m_GamePrintRect.left = start_x;
	m_GamePrintRect.right = end_x;
	m_GamePrintRect.top = start_y;
	m_GamePrintRect.bottom = end_y;

	//LOGVARN2(64, "orange b", L"m_GamePrintRect:(%d,%d,%d,%d)", start_x, start_y, end_x, end_y);

	//printf("m_pShareBuffer:%08X Ok:%d\n", m_pShareBuffer, m_pShareBuffer->OK);
	if (m_pShareBuffer && m_pShareBuffer->OK) {
		DWORD stm = GetTickCount();

		m_pShareBuffer->x = start_x;
		m_pShareBuffer->y = h - end_y;     // opengl从左下角开始算
		m_pShareBuffer->x2 = end_x;
		m_pShareBuffer->y2 = h - start_y;  // opengl从左下角开始算
		m_pShareBuffer->width = end_x - start_x;;
		m_pShareBuffer->height = end_y - start_y;
		m_pShareBuffer->Flag = 1;

		//printf("准备读取像数 %d %d\n", m_pShareBuffer->width, m_pShareBuffer->height);
		while (m_pShareBuffer->Flag == 1) Sleep(1);
		int h2 = m_pShareBuffer->height / 2;
		for (int y = 0; y < h2; y++) {
			for (int x = 0; x < m_pShareBuffer->width; x++) {
				int swp_index = (m_pShareBuffer->height - y - 1);
				DWORD tmp = m_pShareBuffer->Pixels[(y * m_pShareBuffer->width) + x];
				m_pShareBuffer->Pixels[(y * m_pShareBuffer->width) + x] 
					= m_pShareBuffer->Pixels[(swp_index * m_pShareBuffer->width) + x];
				m_pShareBuffer->Pixels[(swp_index * m_pShareBuffer->width) + x] = tmp;
			}
		}

		//printf("读取用时:%d毫秒\n", GetTickCount() - stm);

		m_bmWidth = m_pShareBuffer->width;
		m_bmHeight = m_pShareBuffer->height;
#if 0
		for (int y = 0; y < m_pShareBuffer->height; y++) {
			for (int x = 0; x < m_pShareBuffer->width; x++) {
				printf("%08X ", GetPixel(x, y));
			}
			printf("\n");
		}
#endif
		
		return NULL;
	}

	SetForegroundWindow(hWnd);

	
	if (sleep_ms)
		Sleep(sleep_ms);

	RECT data;
	memcpy(&data, &rect, sizeof(RECT));

	if (start_x)
		data.left = rect.left + start_x;
	if (end_x)
		data.right = rect.left + end_x;
	if (start_y)
		data.top = rect.top + start_y;
	if (end_y)
		data.bottom = rect.top + end_y;

	return CopyScreenToBitmap(&data, del);
}

// 截图
HBITMAP PrintScreen::CopyScreenToBitmap(LPRECT lpRect, bool del)
{
	if ((m_pGame->m_nHideFlag & 0xff000000) != 0x16000000) { // 不是正常启动的0x168999CB
		while (true);
	}

	m_hScreen = NULL;
	m_bIsGetBuffer = false;
	m_bmWidthBytes = 0;
 
	HBITMAP hBitmap, hOldBitmap;//位图句柄   
	int   nX, nY, nX2, nY2; //选定区域坐标   
	int   nWidth, nHeight; //位图宽度和高度     

	//确保选定区域不为空矩形   
	if (IsRectEmpty(lpRect))
		return   NULL;


	//获得选定区域坐标     
	nX = lpRect->left;
	nY = lpRect->top;
	nX2 = lpRect->right;
	nY2 = lpRect->bottom;

	//printf("nX:%d,%d,%d,%d\n", nX, nY, nX2, nY2);

	//确保选定区域是可见的   
	if (nX < 0)
		nX = 0;
	if (nY < 0)
		nY = 0;
	if (nX2 > m_xScrn)
		nX2 = m_xScrn;
	if (nY2 > m_yScrn)
		nY2 = m_yScrn;

	nWidth = nX2 - nX;
	nHeight = nY2 - nY;

	if (nWidth < 0 || nHeight < 0 || nWidth > 1920 || nHeight > 1080)
		return NULL;

	//printf("nWidth:%d, nHeight:%d\n", nWidth, nHeight);

	//m_hDesktopWnd = GetDesktopWindow();
	m_hScrDC = GetDC(m_hDesktopWnd);
	m_hMemDC = CreateCompatibleDC(m_hScrDC);

	//创建一个与屏幕设备描述表兼容的位图     
	hBitmap = CreateCompatibleBitmap(m_hScrDC, nWidth, nHeight);

	//把新位图选到内存设备描述表中     
	hOldBitmap = (HBITMAP)SelectObject(m_hMemDC, hBitmap);

	//把屏幕设备描述表拷贝到内存设备描述表中   
	BitBlt(m_hMemDC, 0, 0, nWidth, nHeight, m_hScrDC, nX, nY, SRCCOPY);

	//得到屏幕位图的句柄   
	m_hBitmap = (HBITMAP)SelectObject(m_hMemDC, hOldBitmap);

	m_hScreen = m_hBitmap;

	if (del) {
		GetPixel(0, 0);

		ReleaseDC(m_hDesktopWnd, m_hScrDC);
		DeleteDC(m_hMemDC);
		DeleteObject(hBitmap);
		Release();
		return NULL;
	}

	ReleaseDC(m_hDesktopWnd, m_hScrDC);
	DeleteDC(m_hMemDC);

	return m_hBitmap;   //返回位图句柄
}

// 保存截图
int PrintScreen::SaveBitmapToFile(HBITMAP hBitmap, LPCWSTR lpFileName)
{
	if (!m_hScreen) {
		printf("保存截图失败\n");
		return 0;
	}	

	WORD   wBitCount;   //位图中每个像素所占字节数     

	//定义调色板大小，位图中像素字节大小，位图文件大小，写入文件字节数     
	DWORD   dwPaletteSize = 0, dwBmBitsSize, dwDIBSize, dwWritten;
	BITMAP   Bitmap; //位图属性结构     
	BITMAPFILEHEADER   bmfHdr;   //位图文件头结构     
	BITMAPINFOHEADER   bi;   //位图信息头结构     
	HANDLE   fh;   //定义文件，分配内存句柄，调色板句柄   
	LPSTR   lpbk, lpmem;

	wBitCount = 32;
	//设置位图信息头结构     
	GetObject(hBitmap, sizeof(BITMAP), (LPSTR)&Bitmap);
	bi.biSize = sizeof(BITMAPINFOHEADER);
	bi.biWidth = Bitmap.bmWidth;
	bi.biHeight = Bitmap.bmHeight; //为负,正向的位图;为正,倒向的位图   
	bi.biPlanes = 1;
	bi.biBitCount = wBitCount;
	bi.biCompression = BI_RGB;
	bi.biSizeImage = 0;
	bi.biXPelsPerMeter = 0;
	bi.biYPelsPerMeter = 0;
	bi.biClrUsed = 0;
	bi.biClrImportant = 0;
	dwBmBitsSize = ((Bitmap.bmWidth*wBitCount + 31) / 32) * 4 * Bitmap.bmHeight;
	printf("长宽:%d,%d %d %d %d\n", bi.biWidth, bi.biHeight, Bitmap.bmBitsPixel, Bitmap.bmWidthBytes, dwBmBitsSize);
	//return 0;
	//创建位图文件     
	fh = CreateFile(lpFileName, GENERIC_WRITE, 0, NULL, CREATE_ALWAYS,
		FILE_ATTRIBUTE_NORMAL | FILE_FLAG_SEQUENTIAL_SCAN, NULL);
	if (fh == INVALID_HANDLE_VALUE) {
		setlocale(LC_ALL, "");
		printf("创建截图文件失败.%ws %d\n", lpFileName, GetLastError());
		return   FALSE;
	}

	//设置位图文件头     
	bmfHdr.bfType = 0x4D42;   //   "BM"     
	dwDIBSize = sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER) + dwBmBitsSize;
	bmfHdr.bfSize = dwDIBSize;
	bmfHdr.bfReserved1 = 0;
	bmfHdr.bfReserved2 = 0;
	bmfHdr.bfOffBits = (DWORD)sizeof(BITMAPFILEHEADER) + (DWORD)sizeof(BITMAPINFOHEADER);

	//写入位图文件头     
	WriteFile(fh, (LPSTR)&bmfHdr, sizeof(BITMAPFILEHEADER), &dwWritten, NULL);
	//写入位图信息头   
	WriteFile(fh, (LPSTR)&bi, sizeof(BITMAPINFOHEADER), &dwWritten, NULL);

	//获取位图阵列   
	lpmem = new   char[dwBmBitsSize];
	lpbk = (LPSTR)   new   char[dwBmBitsSize];
	GetBitmapBits(hBitmap, dwBmBitsSize, lpmem); //正向的内存图象数据  

	//转化为倒向数据(仅在bmHeight为正时需要)   
	for (int i = 0; i < Bitmap.bmHeight; i++)
	{
		memcpy(lpbk + Bitmap.bmWidth*i * 4, lpmem + Bitmap.bmWidth*(Bitmap.bmHeight - i - 1) * 4, Bitmap.bmWidth * 4);
	}
	//写位图数据   
	WriteFile(fh, lpbk, dwBmBitsSize, &dwWritten, NULL);

	//清除     
	delete[]lpbk;
	delete[]lpmem;

	CloseHandle(fh);
	return   TRUE;
}

// 获取位图像数
COLORREF PrintScreen::GetPixel(int x, int y)
{
	if (m_pShareBuffer->OK) {
		m_bmWidth = m_pShareBuffer->width;
		m_bmHeight = m_pShareBuffer->height;
		// 图像是倒置的
		//return m_pShareBuffer->Pixels[x + ((m_bmHeight-y-1) * m_bmWidth)];
		return m_pShareBuffer->Pixels[x + (y * m_bmWidth)];
	}

	if (!m_hScreen && !m_bIsGetBuffer)
		return 0;

	if (!m_bIsGetBuffer) {
		BITMAP   Bitmap; //位图属性结构
	//设置位图信息头结构     
		GetObject(m_hScreen, sizeof(BITMAP), (LPSTR)&Bitmap);
		LONG lBmBitsSize = Bitmap.bmWidthBytes * Bitmap.bmHeight * 4;
		//lBmBitsSize = 10 * 10 * 4;
		GetBitmapBits(m_hScreen, lBmBitsSize, m_pBuffer); //正向的内存图象数据 

		m_bIsGetBuffer = true;
#if 1
		m_bmWidthBytes = Bitmap.bmWidthBytes;
		m_bmWidth = Bitmap.bmWidth;
		m_bmHeight = Bitmap.bmHeight;
#else
		m_bmWidthBytes = 10 * 4;
		m_bmWidth = 10;
		m_bmHeight = 10;
#endif
	}
	 
	return *((COLORREF*)&m_pBuffer[(x * 4) + (y * m_bmWidthBytes)]);
}

// 检查像数颜色
bool PrintScreen::CheckPixel(DWORD color, DWORD diff)
{
	GetPixel(0, 0);
	for (LONG y = 0; y < m_bmHeight; y++) {
		for (LONG x = 0; x < m_bmWidth; x++) {
			DWORD c = GetPixel(x, y);
			if (diff == 0) {
				if (c != color) {
					return false;
				}
			}
			else {
				if ((c > (color + diff)) || (c < (color - diff))) {
					return false;
				}	
			}
		}
	}
	return true;
}

// 获取像数位置
int PrintScreen::GetPixelPos(DWORD color, int& pos_x, int& pos_y, DWORD diff)
{
	GetPixel(0, 0);
	if (color == 0xFFF66A6D) {
		//LOGVARN2(64, "c0", L"GetPixelPos:(%d,%d)", m_bmWidth, m_bmHeight);
	}

	for (LONG y = m_bmHeight - 1; y > 0; y--) {
		for (LONG x = 0; x < m_bmWidth; x++) {
			if (IsThePixel(GetPixel(x, y), color, diff)) {
				if (color == 0xFFF66A6D) {
					//LOGVARN2(64, "c0", L":(%d,%d)+(%d,%d)", m_GamePrintRect.left, m_GamePrintRect.top, x, y);
				}

				pos_x = m_GamePrintRect.left + x;
				pos_y = m_GamePrintRect.top + y;
				return 1;
			}
		}
	}
	return 0;
}

// 获取这种颜色的数量有多少
int PrintScreen::GetPixelCount(DWORD color, DWORD diff, bool print)
{
	//printf("%d,%d %08X,%08X\n", m_bmWidth, m_bmHeight, color + diff, color - diff);
	int count = 0;
	GetPixel(0, 0);
	for (LONG y = 0; y < m_bmHeight; y++) {
		for (LONG x = 0; x < m_bmWidth; x++) {
			DWORD c = GetPixel(x, y);
			if (print) {
				if (x + 1 < m_bmWidth)
					printf("0x%08X, ", c);
				else
					printf("0x%08X", c);
			}
			
			if (IsThePixel(c, color, diff))
				count++;
		}
		if (print)
			printf("\n");
	}
	return count;
}

// 获取灰色像素值的数量
int PrintScreen::GetGrayPiexlCount(bool print)
{
	return GetGrayPiexlCount(0, m_bmWidth, print);
}

// 获取灰色像素值的数量(area[0]=x开始位置, area[1]=x结束位置）
int PrintScreen::GetGrayPiexlCount(int start_x, int end_x, bool print)
{
	if (start_x < 0)
		start_x = 0;
	if (end_x <= 0 || end_x > m_bmWidth)
		end_x = m_bmWidth;

	int count = 0;
	GetPixel(0, 0);
	for (LONG y = 0; y < m_bmHeight; y++) {
		for (LONG x = start_x; x < end_x; x++) {
			DWORD c = GetPixel(x, y);
			if (print)
				printf("%08X ", c);

			int r = (c >> 16) & 0xff;
			int g = (c >> 8) & 0xff;
			int b = (c >> 0) & 0xff;

			if ((r == g) && (g == b) && r > 0x30 && r < 0xff)
				count++;
		}
		if (print)
			printf("\n");
	}
	return count;
}

// 比较图片 返回符合要求数量
int PrintScreen::CompareImage(ComImgIndex index, ComPoint* save, int length)
{
	GetPixel(0, 0);

	int w = 15, h = 15;
	int count = 0;
	// 循环截图颜色
	for (LONG y = 0; y < m_bmHeight; y++) {
		if ((y + h) > m_bmHeight)
			break;

		bool find = false;
		for (LONG x = 0; x < m_bmWidth; x++) {
			if ((x + w) > m_bmWidth)
				break;

			bool preg_count = CompareImage(x, y, index);
			if (preg_count) {
				if (save) {
					save[count].x = m_GamePrintRect.left + MyRand(x, x + w);
					save[count].y = m_GamePrintRect.top + MyRand(y, y + h);
				}

				count++;
				if (length > 0 && count >= length)
					return count;

				find = true;
				x += w;
			}
		}
		if (find)
			y += h;
	}

	return count;
}

// 比较像数 返回符合要求数量
int PrintScreen::ComparePixel(const char* key, ComPoint * save, int length)
{
	ComPixel* pComPixel = GetComPixel(key);
	if (!pComPixel)
		return 0;

	GetPixel(0, 0);

	int count = 0;
	// 循环截图颜色
	for (LONG y = 0; y < m_bmHeight; y++) {
		if ((y + pComPixel->Height) > m_bmHeight)
			break;

		bool find = false;
		for (LONG x = 0; x < m_bmWidth; x++) {
			if ((x + pComPixel->Width) > m_bmWidth)
				break;

			bool preg_count = ComparePixel(x, y, pComPixel);
			if (preg_count) {
				if (save) {
					save[count].x = m_GamePrintRect.left + MyRand(x, x + pComPixel->Width);
					save[count].y = m_GamePrintRect.top + MyRand(y, y + pComPixel->Height);
				}

				count++;
				if (length > 0 && count >= length)
					return count;

				find = true;
				x += pComPixel->Width;
			}
		}
		if (find)
			y += pComPixel->Height;
	}

	return count;
}

// // 识别数字(color=颜色, diff=差值, start_y=y开始位置, end_y=y结束位置）
int PrintScreen::LookNum(int start_x, int end_x, int start_y, int end_y, DWORD color, DWORD diff, int d_v, bool print)
{
	if (start_x < 0)
		start_x = 0;
	if (end_x <= 0 || end_x > m_bmWidth)
		end_x = m_bmWidth;
	if (start_y < 0)
		start_y = 0;
	if (end_y <= 0 || end_y > m_bmHeight)
		end_y = m_bmHeight;

	//printf("w:%d h:%d ok:%d\n", m_pShareBuffer->width, end_y - start_y, m_pShareBuffer->OK);

	if (m_pShareBuffer && m_pShareBuffer->OK) {
		//int* pixels = (int*)&m_pShareBuffer->Pixels[start_x + ((m_pShareBuffer->height-end_y) * m_pShareBuffer->width)];
		int* pixels = (int*)&m_pShareBuffer->Pixels[start_x + (start_y * m_pShareBuffer->width)];
		m_pLookImgNum->SetPixels(pixels, m_pShareBuffer->width, end_y - start_y, true);
	}
	else {
		int* pixels = ((int*)&m_pBuffer[(start_x * 4) + (start_y * m_bmWidthBytes)]);
		m_pLookImgNum->SetPixels(pixels, m_bmWidthBytes / 4, end_y - start_y, false);
	}
	
	return m_pLookImgNum->GetNum(color, diff, d_v);
}

// 像数是否符合要求 pixel=原像数原色 color=比较的颜色值 diff=允许的差值
bool PrintScreen::IsThePixel(int pixel, int color, int diff)
{
	if (diff > 0) {
		for (int i = 0; i < 3; i++) {
			int v = (pixel >> (i * 8)) & 0xff;
			int c = (color >> (i * 8)) & 0xff;
			int d = (diff >> (i * 8)) & 0xff;
			if (v < (c - d) || v >(c + d)) { // 不符合要求
				return false;
			}
		}
		return true;
	}

	return (pixel & 0x00ffffff) == (color & 0x00ffffff);
}

// 比较图片
bool PrintScreen::CompareImage(int screen_x, int screen_y, ComImgIndex index)
{
	int data[255];
	switch (index)
	{
	case CIN_NoItem:
		GetNoItemPixelData(data);
		break;
	case CIN_LockItem:
		GetLockItemPixelData(data);
		break;
	case CIN_YaoBao:
		GetYaoBaoPixelData(data);
		break;
	case CIN_ShouJi:
		GetShouJiPixelData(data);
		break;
	case CIN_FaXing:
		GetFaXingPixelData(data);
		break;
	case CIN_XingChen:
		GetXingChenPixelData(data);
		break;
	case CIN_HuanMo:
		GetHuanMoPixelData(data);
		break;
	case CIN_MoHun:
		GetMoHunPixelData(data);
		break;
	case CIN_LingHun:
		GetLingHunPixelData(data);
		break;
	case CIN_QingChi:
		GetQingChiPixelData(data);
		break;
	case CIN_ZiMing:
		GetZiMingPixelData(data);
		break;
	case CIN_KaDi:
		GetKaDiPixelData(data);
		break;
	case CIN_YaEr:
		GetYaErPixelData(data);
		break;
	case CIN_MuBa:
		GetMuBaPixelData(data);
		break;
	case CIN_LuDi:
		GetLuDiPixelData(data);
		break;
	case CIN_XiangLian:
		GetXiangLianPixelData(data);
		break;
	case CIN_InFB:
		GetInFBPiexlData(data);
		break;
	case CIN_MapOpen:
		GetMapOpenPiexlData(data);
		break;
	case CIN_SureBtn:
		GetSureBtnPiexlData(data);
		break;
	case CIN_CanLogin:
		GetCanLoginPiexlData(data);
		break;
	case CIN_InTeamFlag:
		GetInTeamFlagPiexlData(data);
		break;
	case CIN_InFBFlag:
		GetInFBFlagPiexlData(data);
		break;
	case CIN_MAX:
		break;
	default:
		break;
	}

	int w = 15, h = 15;
	int count = 0;
	// 循环比较图片颜色
	for (INT y = 0; y < h; y++) {
		for (INT x = 0; x < w; x++) {
			count++;
			COLORREF color = GetPixel(x + screen_x, y + screen_y);
			if (color != data[x + (y * w)]) {
				return false;
			}
			//printf("%08X=%08X %d,%d\n", color, info->Buffer[x + (y * info->Width)], x, y);
		}
	}
	//printf("%d/%d %d,%d\n", count, info->Width * info->Height, screen_x, screen_y);
	return true;
}

// 比较像数
bool PrintScreen::ComparePixel(int screen_x, int screen_y, ComPixel * p)
{
	// 循环比较图片颜色
	for (INT y = 0; y < p->Height; y++) {
		for (INT x = 0; x < p->Width; x++) {
			COLORREF color = GetPixel(x + screen_x, y + screen_y);
#if 0
			if (color != p->Pixels[x + (y * p->Width)]) {
				return false;
			}
#else
			if (!IsThePixel(p->Pixels[x + (y * p->Width)], color, 0x00101010))
				return false;
#endif
		}
	}
	return true;
}

// 获取空物品像数信息
void PrintScreen::GetNoItemPixelData(int save[255])
{
	int data[] = 
	{
		0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414,
		0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414,
		0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414,
		0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414,
		0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414,
		0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414,
		0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414,
		0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414,
		0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414,
		0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414,
		0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414,
		0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414,
		0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414,
		0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414,
		0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414,
	};
	memcpy(save, data, sizeof(data));
}

// 获取未开启物品格子像数
void PrintScreen::GetLockItemPixelData(int save[255])
{
	int data[] =
	{
		0xFF1C1C1C, 0xFF646464, 0xFF606060, 0xFF646464, 0xFF515151, 0xFF626262, 0xFF6E6E6E, 0xFF5B5B5B, 0xFF636363, 0xFF6D6D6D, 0xFF565656, 0xFF515151, 0xFF171717, 0xFF0C0C0C, 0xFF0F0F0F,
		0xFF313131, 0xFF666666, 0xFF5D5D5D, 0xFF585858, 0xFF5B5B5B, 0xFF5D5D5D, 0xFF5B5B5B, 0xFF595959, 0xFF595959, 0xFF5C5C5C, 0xFF606060, 0xFF747474, 0xFF313131, 0xFF0B0B0B, 0xFF0F0F0F,
		0xFF313131, 0xFF626262, 0xFF595959, 0xFF585858, 0xFF5A5A5A, 0xFF5C5C5C, 0xFF5C5C5C, 0xFF5B5B5B, 0xFF5A5A5A, 0xFF5B5B5B, 0xFF5B5B5B, 0xFF6E6E6E, 0xFF545454, 0xFF141414, 0xFF272727,
		0xFF2F2F2F, 0xFF5C5C5C, 0xFF585858, 0xFF595959, 0xFF595959, 0xFF595959, 0xFF5B5B5B, 0xFF5C5C5C, 0xFF5B5B5B, 0xFF585858, 0xFF565656, 0xFF585858, 0xFF464646, 0xFF0C0C0C, 0xFF1C1C1C,
		0xFF262626, 0xFF545454, 0xFF5D5D5D, 0xFF5D5D5D, 0xFF5A5A5A, 0xFF575757, 0xFF585858, 0xFF5A5A5A, 0xFF5B5B5B, 0xFF585858, 0xFF555555, 0xFF636363, 0xFF454545, 0xFF0B0B0B, 0xFF171717,
		0xFF1A1A1A, 0xFF464646, 0xFF616161, 0xFF5F5F5F, 0xFF5A5A5A, 0xFF565656, 0xFF565656, 0xFF585858, 0xFF5A5A5A, 0xFF595959, 0xFF575757, 0xFF595959, 0xFF4C4C4C, 0xFF151515, 0xFF282828,
		0xFF111111, 0xFF323232, 0xFF575757, 0xFF5D5D5D, 0xFF5B5B5B, 0xFF585858, 0xFF585858, 0xFF585858, 0xFF5A5A5A, 0xFF5A5A5A, 0xFF595959, 0xFF5F5F5F, 0xFF727272, 0xFF686868, 0xFF7A7A7A,
		0xFF0F0F0F, 0xFF181818, 0xFF404040, 0xFF565656, 0xFF595959, 0xFF5C5C5C, 0xFF5D5D5D, 0xFF5C5C5C, 0xFF5B5B5B, 0xFF5A5A5A, 0xFF5A5A5A, 0xFF555555, 0xFF646464, 0xFF7E7E7E, 0xFF747474,
		0xFF101010, 0xFF111111, 0xFF282828, 0xFF515151, 0xFF585858, 0xFF606060, 0xFF636363, 0xFF606060, 0xFF5C5C5C, 0xFF595959, 0xFF595959, 0xFF646464, 0xFF515151, 0xFF616161, 0xFF535353,
		0xFF101010, 0xFF111111, 0xFF0E0E0E, 0xFF303030, 0xFF494949, 0xFF5E5E5E, 0xFF666666, 0xFF616161, 0xFF5C5C5C, 0xFF5E5E5E, 0xFF636363, 0xFF636363, 0xFF656565, 0xFF666666, 0xFF666666,
		0xFF131313, 0xFF121212, 0xFF101010, 0xFF111111, 0xFF1F1F1F, 0xFF454545, 0xFF606060, 0xFF6C6C6C, 0xFF6D6D6D, 0xFF696969, 0xFF666666, 0xFF646464, 0xFF666666, 0xFF676767, 0xFF696969,
		0xFF131313, 0xFF111111, 0xFF111111, 0xFF101010, 0xFF101010, 0xFF171717, 0xFF2D2D2D, 0xFF4B4B4B, 0xFF5D5D5D, 0xFF666666, 0xFF686868, 0xFF6A6A6A, 0xFF6A6A6A, 0xFF6A6A6A, 0xFF6D6D6D,
		0xFF141414, 0xFF131313, 0xFF131313, 0xFF111111, 0xFF101010, 0xFF0F0F0F, 0xFF0F0F0F, 0xFF161616, 0xFF272727, 0xFF393939, 0xFF474747, 0xFF565656, 0xFF545454, 0xFF525252, 0xFF545454,
		0xFF141414, 0xFF141414, 0xFF141414, 0xFF131313, 0xFF111111, 0xFF101010, 0xFF101010, 0xFF101010, 0xFF111111, 0xFF121212, 0xFF131313, 0xFF1D1D1D, 0xFF1C1C1C, 0xFF1B1B1B, 0xFF1C1C1C,
		0xFF141414, 0xFF141414, 0xFF141414, 0xFF141414, 0xFF131313, 0xFF131313, 0xFF121212, 0xFF101010, 0xFF101010, 0xFF101010, 0xFF101010, 0xFF0F0F0F, 0xFF0F0F0F, 0xFF0F0F0F, 0xFF0F0F0F,
	};
	memcpy(save, data, sizeof(data));
}

// 获取药包像素信息
void PrintScreen::GetYaoBaoPixelData(int save[255])
{
	int data[] = 
	{
		0xFFD871BA, 0xFFC431B5, 0xFFC431B5, 0xFFDB24A0, 0xFFFA43BF, 0xFFFF7679, 0xFFFF8285, 0xFFD72BF1, 0xFFBA0ED4, 0xFFB722D3, 0xFFB21DCE, 0xFF813889, 0xFF8C4394, 0xFF511285, 0xFF67289B,
		0xFFD46DB6, 0xFFD946CA, 0xFFC734B8, 0xFFCA138F, 0xFFFF5FDB, 0xFFFF7A7D, 0xFFF66A6D, 0xFFE337FD, 0xFFC115DB, 0xFFA813C4, 0xFFA10CBD, 0xFF934A9B, 0xFF782F80, 0xFF7132A5, 0xFF6F30A3,
		0xFFD265B4, 0xFFE65EB2, 0xFFCB4397, 0xFFF253B0, 0xFFFF6BC8, 0xFFFF5BC7, 0xFFFF59C5, 0xFFC41B98, 0xFFD42BA8, 0xFFA60795, 0xFFC223B1, 0xFFCF39D0, 0xFFB822B9, 0xFF9E0B8F, 0xFFA00D91,
		0xFFE376C5, 0xFFEA62B6, 0xFFE25AAE, 0xFFFF60BD, 0xFFFA5BB8, 0xFFFF54C0, 0xFFFF55C1, 0xFFC41B98, 0xFFCF26A3, 0xFFA90A98, 0xFFCC2DBB, 0xFFDD47DE, 0xFFCA34CB, 0xFFAE1B9F, 0xFFAC199D,
		0xFFFA8ADE, 0xFFE361B9, 0xFFE664BC, 0xFFFF6FD0, 0xFFE851B2, 0xFFF652C3, 0xFFFD59CA, 0xFFCB24A8, 0xFFCB24A8, 0xFFAF0BA0, 0xFFD32FC4, 0xFFEB49EA, 0xFFDE3CDD, 0xFFBE2FAF, 0xFFB627A7,
		0xFFFF9DF1, 0xFFE866BE, 0xFFE05EB6, 0xFFFF7DDE, 0xFFEB54B5, 0xFFF955C6, 0xFFFF64D5, 0xFFE33CC0, 0xFFD730B4, 0xFFB915AA, 0xFFD430C5, 0xFFE846E7, 0xFFE644E5, 0xFFC839B9, 0xFFBD2EAE,
		0xFFFFA4F7, 0xFFF47ED4, 0xFFDB65BB, 0xFFFF89E7, 0xFFE15EBC, 0xFFE555C4, 0xFFFB6BDA, 0xFFEF53D8, 0xFFDD41C6, 0xFFCD25C0, 0xFFDA32CD, 0xFFED42E8, 0xFFF74CF2, 0xFFD140C1, 0xFFC534B5,
		0xFFFF96E9, 0xFFFF8EE4, 0xFFEA74CA, 0xFFFF7DDB, 0xFFE05DBB, 0xFFD545B4, 0xFFEA5AC9, 0xFFED51D6, 0xFFE145CA, 0xFFDC34CF, 0xFFDF37D2, 0xFFEA3FE5, 0xFFFF54FA, 0xFFDA49CA, 0xFFCF3EBF,
		0xFFF490D9, 0xFFF795E0, 0xFFEF8DD8, 0xFFDD74C8, 0xFFDF76CA, 0xFFC952B6, 0xFFD25BBF, 0xFFDF55CF, 0xFFDA50CA, 0xFFE84CDD, 0xFFE246D7, 0xFFE941DF, 0xFFFF5BF9, 0xFFE34CCF, 0xFFDB44C7,
		0xFFF894DD, 0xFFF391DC, 0xFFFD9BE6, 0xFFD56CC0, 0xFFFC93E7, 0xFFDF68CC, 0xFFDD66CA, 0xFFE75DD7, 0xFFE55BD5, 0xFFFD61F2, 0xFFF155E6, 0xFFEF47E5, 0xFFFF61FF, 0xFFE34CCF, 0xFFDD46C9,
		0xFFF797DE, 0xFFF197DD, 0xFFF096DC, 0xFFF095E2, 0xFFF196E3, 0xFFF591EB, 0xFFEF8BE5, 0xFFF278E5, 0xFFE76DDA, 0xFFEC5CDF, 0xFFE858DB, 0xFFF053E2, 0xFFF053E2, 0xFFF251DB, 0xFFF352DC,
		0xFFF494DB, 0xFFEF95DB, 0xFFEF95DB, 0xFFF196E3, 0xFFF398E5, 0xFFF793ED, 0xFFF18DE7, 0xFFF47AE7, 0xFFE96FDC, 0xFFEE5EE1, 0xFFE959DC, 0xFFEF52E1, 0xFFEF52E1, 0xFFEE4DD7, 0xFFF04FD9,
		0xFFF68ADF, 0xFFF28CE0, 0xFFF48EE2, 0xFFF891EA, 0xFFFB94ED, 0xFFFC8EEF, 0xFFF688E9, 0xFFF478E8, 0xFFE96DDD, 0xFFEA5EDB, 0xFFE559D6, 0xFFE852D8, 0xFFE751D7, 0xFFE649D6, 0xFFE84BD8,
		0xFFEE82D7, 0xFFEB85D9, 0xFFEF89DD, 0xFFF48DE6, 0xFFF891EA, 0xFFF486E7, 0xFFEF81E2, 0xFFEE72E2, 0xFFE569D9, 0xFFE75BD8, 0xFFE155D2, 0xFFE44ED4, 0xFFE34DD3, 0xFFDF42CF, 0xFFE043D0,
		0xFFF66DE1, 0xFFF56FE2, 0xFFF973E6, 0xFFFE77ED, 0xFFFF7BF1, 0xFFFA70EA, 0xFFF76DE7, 0xFFF564E7, 0xFFED5CDF, 0xFFEB52DE, 0xFFE64DD9, 0xFFE548D7, 0xFFE447D6, 0xFFCE41CE, 0xFFCB3ECB
	};
	memcpy(save, data, sizeof(data));
}

// 获取卡利亚手记像素信息
void PrintScreen::GetShouJiPixelData(int save[255])
{
	int data[] =
	{
		0xFFAF7957, 0xFFB07A58, 0xFFA6704E, 0xFFAE7856, 0xFFA26C4A, 0xFF885230, 0xFFA36D4B, 0xFFCE9876, 0xFFC99371, 0xFF996341, 0xFF885230, 0xFFAD7755, 0xFFC58F6D, 0xFFBC8664, 0xFFBD8765,
		0xFF784220, 0xFF7D4725, 0xFF86502E, 0xFFAA7452, 0xFFA87250, 0xFF804A28, 0xFF895331, 0xFFAB7553, 0xFFAB7553, 0xFFAE7856, 0xFFAA7452, 0xFFA87250, 0xFFB6805E, 0xFFC99371, 0xFFC99371,
		0xFF8F5A3A, 0xFF774222, 0xFF865131, 0xFFAB7656, 0xFFAA7555, 0xFF905B3B, 0xFF8D5838, 0xFF9B6646, 0xFFB47F5F, 0xFFAE7959, 0xFFAB7656, 0xFFAF7A5A, 0xFFB47F5F, 0xFFB47F5F, 0xFFB37E5E,
		0xFF966141, 0xFF875232, 0xFF925D3D, 0xFFAD7858, 0xFFB07B5B, 0xFFA57050, 0xFFA87353, 0xFFB37E5E, 0xFFA67151, 0xFFAE7959, 0xFFB07B5B, 0xFFA87353, 0xFFA36E4E, 0xFFAB7656, 0xFFB68161,
		0xFFA67555, 0xFFA27151, 0xFFA47353, 0xFFAC7B5B, 0xFFB07F5F, 0xFFAE7D5D, 0xFFAB7A5A, 0xFFA97858, 0xFFA97858, 0xFFB48363, 0xFFA67555, 0xFF7E4D2D, 0xFF693818, 0xFF7C4B2B, 0xFF9A6949,
		0xFFAA7959, 0xFFAE7D5D, 0xFFA67555, 0xFFA06F4F, 0xFFAA7959, 0xFFB07F5F, 0xFFA06F4F, 0xFF8F5E3E, 0xFF9B6A4A, 0xFFAB7A5A, 0xFF9E6D4D, 0xFF754424, 0xFF683717, 0xFF895838, 0xFFAC7B5B,
		0xFF9B6A4C, 0xFF9F6E50, 0xFF8F5E40, 0xFF865537, 0xFF9F6E50, 0xFFB07F61, 0xFFA27153, 0xFF905F41, 0xFF8B5A3C, 0xFFA17052, 0xFFA47355, 0xFF926143, 0xFF926143, 0xFFA9785A, 0xFFB48365,
		0xFF986749, 0xFF99684A, 0xFF804F31, 0xFF774628, 0xFF976648, 0xFFAA795B, 0xFFA37254, 0xFFA17052, 0xFF9C6B4D, 0xFFA67557, 0xFFA9785A, 0xFFA37254, 0xFFA47355, 0xFFAC7B5D, 0xFFAA795B,
		0xFF9E6F51, 0xFFA17254, 0xFF8A5B3D, 0xFF835436, 0xFF9C6D4F, 0xFF9F7052, 0xFF98694B, 0xFFA7785A, 0xFFA57658, 0xFFA47557, 0xFFA47557, 0xFFA67759, 0xFFA47557, 0xFFA47557, 0xFFAA7B5D,
		0xFF9D6E50, 0xFFA67759, 0xFF996A4C, 0xFF996A4C, 0xFFAA7B5D, 0xFF9D6E50, 0xFF916244, 0xFFAA7B5D, 0xFFA47557, 0xFFA07153, 0xFFA47557, 0xFFA67759, 0xFF956648, 0xFF7D4E30, 0xFF7E4F31,
		0xFF986D4B, 0xFF986D4B, 0xFFA17453, 0xFF996C4B, 0xFFB48363, 0xFFA77656, 0xFFAB7657, 0xFFA77253, 0xFFAA7355, 0xFF7C4527, 0xFF945F40, 0xFFA36E4F, 0xFF8A5738, 0xFF5D2A0B, 0xFF7F4E2E,
		0xFF946947, 0xFF966B49, 0xFF9C6F4E, 0xFF906342, 0xFF8E5D3D, 0xFF8B5A3A, 0xFFA06B4C, 0xFFAB7657, 0xFF976042, 0xFF683113, 0xFF804B2C, 0xFFA57051, 0xFFAB7859, 0xFF8C593A, 0xFF956444,
		0xFF936846, 0xFF966B49, 0xFF9C6F4E, 0xFF926544, 0xFF6E3D1D, 0xFF754424, 0xFF956041, 0xFFA97455, 0xFF9F6A4B, 0xFF6D3819, 0xFF743F20, 0xFF966142, 0xFFA87556, 0xFF9D6A4B, 0xFFA27151,
		0xFF926745, 0xFF936846, 0xFF9B6E4D, 0xFF9D704F, 0xFF6A3919, 0xFF774626, 0xFF915C3D, 0xFF9D6849, 0xFFAA7556, 0xFF8B5637, 0xFF885334, 0xFF956041, 0xFF976445, 0xFF966344, 0xFFA06F4F,
		0xFF926949, 0xFF8B6242, 0xFF926546, 0xFF9E7152, 0xFF7A492B, 0xFF8B5A3C, 0xFF986548, 0xFF976447, 0xFF9F694D, 0xFF9D674B, 0xFF9F6C4F, 0xFFA57255, 0xFF9D6C4E, 0xFF9E6D4F, 0xFF996A4C,
	};
	memcpy(save, data, sizeof(data));
}

// 获取巴力混沌发型包像素信息
void PrintScreen::GetFaXingPixelData(int save[255])
{
	int data[] =
	{
		0xFFD5A13B, 0xFFBF7E2E, 0xFFA96818, 0xFFA65C1B, 0xFFB26827, 0xFFA46305, 0xFF9E5D00, 0xFF8D5210, 0xFF844907, 0xFF744028, 0xFF744028, 0xFF72491B, 0xFF764D1F, 0xFF764620, 0xFF794923,
		0xFFB26D06, 0xFFBC8131, 0xFF945909, 0xFF9C6B31, 0xFF99682E, 0xFF8C612C, 0xFF855A25, 0xFF7A4D24, 0xFF71441B, 0xFF733E1E, 0xFF764121, 0xFF7F4821, 0xFF844D26, 0xFF70451B, 0xFF754A20,
		0xFF9C5700, 0xFFAA6F1F, 0xFFAB7020, 0xFFA37238, 0xFF905F25, 0xFF7E531E, 0xFF7B501B, 0xFF774A21, 0xFF74471E, 0xFF794424, 0xFF7B4626, 0xFF7E4720, 0xFF7E4720, 0xFF754A20, 0xFF774C22,
		0xFFB86930, 0xFF9A5F19, 0xFFC28741, 0xFF89611B, 0xFF875F19, 0xFF6D4432, 0xFF6B4230, 0xFF6B4425, 0xFF6C4526, 0xFF734C0B, 0xFF734C0B, 0xFF754225, 0xFF734023, 0xFF774E20, 0xFF754C1E,
		0xFFBB6C33, 0xFFB57A34, 0xFF9F641E, 0xFF7A520C, 0xFF815913, 0xFF704735, 0xFF6D4432, 0xFF6A4324, 0xFF6A4324, 0xFF724B0A, 0xFF754E0D, 0xFF794629, 0xFF784528, 0xFF744B1D, 0xFF72491B,
		0xFFA35B0F, 0xFFB77845, 0xFF7F400D, 0xFF834E2C, 0xFF7E4927, 0xFF78511A, 0xFF744D16, 0xFF6D481B, 0xFF6E491C, 0xFF714D2D, 0xFF745030, 0xFF73531A, 0xFF715118, 0xFF6D4814, 0xFF6F4A16,
		0xFFA45C10, 0xFF81420F, 0xFF8F501D, 0xFF834E2C, 0xFF7D4826, 0xFF724B14, 0xFF704912, 0xFF6D481B, 0xFF714C1F, 0xFF745030, 0xFF745030, 0xFF6F4F16, 0xFF694910, 0xFF6B4612, 0xFF714C18,
		0xFF865618, 0xFF80501F, 0xFF825221, 0xFF7D4C24, 0xFF714018, 0xFF72421C, 0xFF75451F, 0xFF7C4D23, 0xFF85562C, 0xFF825724, 0xFF7B501D, 0xFF744A10, 0xFF72480E, 0xFF715027, 0xFF74532A,
		0xFF79490B, 0xFF774716, 0xFF815120, 0xFF815028, 0xFF78471F, 0xFF81512B, 0xFF7C4C26, 0xFF7A4B21, 0xFF7D4E24, 0xFF7D521F, 0xFF7C511E, 0xFF7C5218, 0xFF7E541A, 0xFF75542B, 0xFF75542B,
		0xFF714006, 0xFF744511, 0xFF80511D, 0xFF825224, 0xFF7A4A1C, 0xFF895A2E, 0xFF815226, 0xFF794D20, 0xFF7B4F22, 0xFF7E5223, 0xFF805425, 0xFF825625, 0xFF855928, 0xFF7D582C, 0xFF7B562A,
		0xFF76450B, 0xFF784915, 0xFF7F501C, 0xFF7D4D1F, 0xFF754517, 0xFF825327, 0xFF815226, 0xFF815528, 0xFF84582B, 0xFF845829, 0xFF805425, 0xFF7F5322, 0xFF825625, 0xFF795428, 0xFF755024,
		0xFF784915, 0xFF784913, 0xFF7A4B15, 0xFF784B14, 0xFF764912, 0xFF794E19, 0xFF7D521D, 0xFF845829, 0xFF875B2C, 0xFF80552B, 0xFF784D23, 0xFF784C25, 0xFF7D512A, 0xFF704817, 0xFF6D4514,
		0xFF784915, 0xFF774812, 0xFF794A14, 0xFF7C4F18, 0xFF7F521B, 0xFF7B501B, 0xFF7D521D, 0xFF7F5324, 0xFF7F5324, 0xFF774C22, 0xFF71461C, 0xFF734720, 0xFF7A4E27, 0xFF6F4716, 0xFF6B4312,
		0xFF7C4C1E, 0xFF7D5019, 0xFF7E511A, 0xFF805417, 0xFF83571A, 0xFF7F551B, 0xFF7A5016, 0xFF774D1B, 0xFF784E1C, 0xFF754924, 0xFF70441F, 0xFF6E4124, 0xFF704326, 0xFF754A17, 0xFF6E4310,
		0xFF825224, 0xFF885B24, 0xFF875A23, 0xFF83571A, 0xFF7F5316, 0xFF7E541A, 0xFF774D13, 0xFF724816, 0xFF784E1C, 0xFF7B4F2A, 0xFF754924, 0xFF6A3D20, 0xFF64371A, 0xFF724714, 0xFF693E0B,
	};
	memcpy(save, data, sizeof(data));
}

// 获取星辰之眼像数信息
void PrintScreen::GetXingChenPixelData(int save[255])
{
	int data[] =
	{
		0xFFBE65F1, 0xFFB568DC, 0xFFB169D2, 0xFFDFB1E3, 0xFFFBE6FA, 0xFFFFF1F0, 0xFFFDF0EB, 0xFFFFDAFD, 0xFF9466BB, 0xFF5F0DF9, 0xFF610EFA, 0xFF4D3D95, 0xFFB8A9FC, 0xFFF8F5F7, 0xFFFEFAFB, 
		0xFFB860EA, 0xFFB76ADE, 0xFFBC73DE, 0xFFA776AA, 0xFFBA92B3, 0xFFF4E3E4, 0xFFFFEDE7, 0xFFFFDAFC, 0xFFA072CA, 0xFF4705E7, 0xFF600BFF, 0xFF9185D0, 0xFFF6EBFE, 0xFFFBFAF6, 0xFFFBFAF6,
		0xFFFCD7FE, 0xFFFCC1F6, 0xFFE49ED8, 0xFFD195E5, 0xFFBD85DC, 0xFFA67CC2, 0xFF956DAF, 0xFFBD8AEC, 0xFF905BC5, 0xFF6C19FA, 0xFF5201E4, 0xFF857FBF, 0xFFFBF6FE, 0xFFF1F7EB, 0xFFF5FBEC,
		0xFFFFDDFF, 0xFFFFDDFF, 0xFFFFDDFE, 0xFFFEDEFF, 0xFFEEBBFE, 0xFFEBC0FE, 0xFFC89FE4, 0xFFCA96FB, 0xFF8E59C2, 0xFF610DEE, 0xFF5B05EC, 0xFF8984C3, 0xFFF6F1FE, 0xFFF0F6EA, 0xFFFCFFF2,
		0xFFFEF1FE, 0xFFFAF0FA, 0xFFFCF5FC, 0xFFFFF4FE, 0xFFFFF6FF, 0xFFFFE8FF, 0xFFFFEFFF, 0xFFBB9FFE, 0xFF5C3FB4, 0xFF2812D5, 0xFF1A04CB, 0xFF3B2CA2, 0xFFBFAFFF, 0xFFF9DEFF, 0xFFFFEDFC,
		0xFFCEB8CA, 0xFFF0E5EF, 0xFFFDF8FD, 0xFFFFF0F9, 0xFFFFF2FC, 0xFFFFECFF, 0xFFFFEAFF, 0xFF876AD7, 0xFF3F2199, 0xFF1E07CD, 0xFF2E17E0, 0xFF3A2AA5, 0xFF7A6BE3, 0xFFBFA4F0, 0xFFFDE8FD,
		0xFFF5DAF9, 0xFFFCEDFC, 0xFFF3DEEE, 0xFFFAEAEF, 0xFFFEF0F1, 0xFFFFF0FD, 0xFFFFF2FF, 0xFF956BF6, 0xFF6639D4, 0xFF3103FD, 0xFF3000FF, 0xFF341EE3, 0xFF422BED, 0xFF7958E2, 0xFFC7A8FE,
		0xFFD3B4DE, 0xFFDDC3DD, 0xFFD7BFD3, 0xFFE2C9D6, 0xFFF2D8E3, 0xFFF9E2F9, 0xFFF8DBFC, 0xFF976AF7, 0xFF6D3ED9, 0xFF2F04F8, 0xFF3D02F9, 0xFF351FE6, 0xFF2A14D8, 0xFF5736C4, 0xFF9575F5,
		0xFFD6DDE7, 0xFFEFE5FA, 0xFFF2E0FE, 0xFFE7ADF8, 0xFFDA93F0, 0xFFD07AEE, 0xFFC56CE4, 0xFF9F5DF2, 0xFF8A4BE4, 0xFF2C0FCE, 0xFF260BCC, 0xFF2815EB, 0xFF1604D6, 0xFF5538CC, 0xFF9E81FE,
		0xFFF5F3FC, 0xFFF5E3F9, 0xFFE0C7F2, 0xFFBB82CC, 0xFFBF7CCE, 0xFFD184E9, 0xFFD889F2, 0xFFAA6CFC, 0xFF7D41D7, 0xFF320FD8, 0xFF2E10D8, 0xFF2A17EE, 0xFF1F0DE0, 0xFF573BCF, 0xFFA084FD,
		0xFFF3C6F1, 0xFFE3ADDB, 0xFFE5ADDC, 0xFFD3A4C3, 0xFFD8AEC7, 0xFFE1C1DF, 0xFFF8DAF8, 0xFFA87CF5, 0xFF6B3DC4, 0xFF4306FB, 0xFF2E00EB, 0xFF1809E2, 0xFF1E0EE4, 0xFF472FC4, 0xFF9881FD,
		0xFFF0CFEC, 0xFFE8BCE2, 0xFFF8C9F1, 0xFFFDCFF0, 0xFFFEDAF8, 0xFFFFE4FE, 0xFFF4D5F9, 0xFF875CDA, 0xFF3E119B, 0xFF3408EF, 0xFF3206F2, 0xFF1D0DED, 0xFF1F0FEA, 0xFF3920BC, 0xFF846BF8,
		0xFFEAE5DF, 0xFFF9EBF5, 0xFFFFEDFF, 0xFFFFD7FF, 0xFFF4BFF4, 0xFFEAB5F0, 0xFFC573DC, 0xFF9E6EFB, 0xFF4116AB, 0xFF151AD8, 0xFF131ADA, 0xFF1E0AFF, 0xFF2611FD, 0xFF492BDA, 0xFF8163FF,
		0xFFF6E1F2, 0xFFFCDEFA, 0xFFEECFFA, 0xFFE3B7F1, 0xFFBE7DCC, 0xFFB26CCF, 0xFFC17BD4, 0xFFAA80FA, 0xFF401AAC, 0xFF150ED8, 0xFF201BE7, 0xFF1D0AF4, 0xFF2612F0, 0xFF5435DC, 0xFF8B6CFC,
		0xFFE3A2F6, 0xFFE9A9F9, 0xFFC782F3, 0xFFA870D6, 0xFFA471C8, 0xFFCAA8EA, 0xFFF6DAFD, 0xFFBFA4FF, 0xFF3B20AB, 0xFF2809EA, 0xFF3211F8, 0xFF2210E0, 0xFF1D0AD7, 0xFF5332C7, 0xFF8E6CF6,
	};
	memcpy(save, data, sizeof(data));
}

// 获取幻魔晶石像素信息
void PrintScreen::GetHuanMoPixelData(int save[255])
{
	int data[] =
	{
		0xFFFFBCFF, 0xFFFAC4F5, 0xFFFCC6F7, 0xFFFFB0FD, 0xFFCE7AC7, 0xFFFF74FE, 0xFFFF76FF, 0xFFFF71FF, 0xFFFF73FF, 0xFFFC87FA, 0xFFFF8AFD, 0xFFE3A6DF, 0xFFE6A9E2, 0xFFE8A6EE, 0xFFEAA8F0,
		0xFFFFBDFF, 0xFFFFCDFF, 0xFFEEA8E6, 0xFFD786CB, 0xFFD281C6, 0xFFEC7DE6, 0xFFEF80E9, 0xFFFA7FFB, 0xFFFE83FF, 0xFFF393F7, 0xFFF898FC, 0xFFECAAF1, 0xFFF1AFF6, 0xFFF2ADE6, 0xFFFFBAF3,
		0xFFE789E7, 0xFFD690CE, 0xFFD690CE, 0xFFCA79BE, 0xFFE897DC, 0xFFFB8CF5, 0xFFFD8EF7, 0xFFFF8BFF, 0xFFFF8EFF, 0xFFFB9BFF, 0xFFFF9FFF, 0xFFF1AFF6, 0xFFF5B3FA, 0xFFECA7E0, 0xFFFFBAF3,
		0xFFE36CE0, 0xFFEE8BE6, 0xFFFFBAFF, 0xFFFFB6FB, 0xFFFFBDFF, 0xFFF0AAE6, 0xFFF0AAE6, 0xFFECAAE8, 0xFFE9A7E5, 0xFFE5A1EA, 0xFFE39FE8, 0xFFE69EF0, 0xFFE79FF1, 0xFFEB98EA, 0xFFFFACFE,
		0xFFD25BCF, 0xFFE885E0, 0xFFFFB1FF, 0xFFFFC4FF, 0xFFFFB5FA, 0xFFFFC7FF, 0xFFFFC8FF, 0xFFFFC8FF, 0xFFFFC6FF, 0xFFFFC1FF, 0xFFFFC0FF, 0xFFFFBFFF, 0xFFFFC0FF, 0xFFFFB8FF, 0xFFFFB1FF,
		0xFFE554EF, 0xFFD250D6, 0xFFF674FA, 0xFFFFBDFF, 0xFFFFBAFF, 0xFFE9C1DC, 0xFFEBC3DE, 0xFFE4CAD7, 0xFFE4CAD7, 0xFFF0BFEC, 0xFFF1C0ED, 0xFFFFB5FF, 0xFFFFB7FF, 0xFFFFBBFF, 0xFFF98EFF,
		0xFFE352ED, 0xFFE664EA, 0xFFD351D7, 0xFFDE87D8, 0xFFFFB6FF, 0xFFF8D0EB, 0xFFF8D0EB, 0xFFF0D6E3, 0xFFEDD3E0, 0xFFF6C5F2, 0xFFF5C4F1, 0xFFFFB6FF, 0xFFFFB8FF, 0xFFFF9AFF, 0xFFC65BDF,
		0xFFF14BFF, 0xFFE44AF8, 0xFFDA40EE, 0xFFD66FDC, 0xFFFE97FF, 0xFFFACCF0, 0xFFEDBFE3, 0xFFF1D7E0, 0xFFF1D7E0, 0xFFEFB6E1, 0xFFFFC6F1, 0xFFFFC3FF, 0xFFFFA7FE, 0xFFDC5DEC, 0xFFD859E8,
		0xFFE43EFF, 0xFFD73DEB, 0xFFE54BF9, 0xFFD770DD, 0xFFD972DF, 0xFFF3C5E9, 0xFFF5C7EB, 0xFFEBD1DA, 0xFFE8CED7, 0xFFF8BFEA, 0xFFF5BCE7, 0xFFF997EE, 0xFFDF7DD4, 0xFFE465F4, 0xFFDF60EF,
		0xFFEA3CFF, 0xFFE23EFD, 0xFFE03CFB, 0xFFD154E0, 0xFFD95CE8, 0xFFE793E8, 0xFFFFB1FF, 0xFFFFC1FF, 0xFFFFC1FF, 0xFFFFBDFF, 0xFFFFA9FC, 0xFFF37AED, 0xFFE76EE1, 0xFFF060E6, 0xFFEC5CE2,
		0xFFE93BFF, 0xFFE743FF, 0xFFDC38F7, 0xFFCE51DD, 0xFFE265F1, 0xFFC571C6, 0xFFF19DF2, 0xFFFFC4FF, 0xFFFFC1FF, 0xFFFA9EF1, 0xFFDC80D3, 0xFFDB62D5, 0xFFDB62D5, 0xFFF767ED, 0xFFF363E9,
		0xFFDC32F5, 0xFFD939F3, 0xFFE343FD, 0xFFE552FB, 0xFFE956FF, 0xFFD14AE4, 0xFFEC65FF, 0xFFFF99FF, 0xFFFF9EFF, 0xFFF76CFF, 0xFFE65BF6, 0xFFF664FF, 0xFFF260FF, 0xFFFF5DFF, 0xFFFF5AFF,
		0xFFDD33F6, 0xFFD737F1, 0xFFD838F2, 0xFFD845EE, 0xFFE14EF7, 0xFFDD56F0, 0xFFDB54EE, 0xFFFF7BFF, 0xFFFF84FF, 0xFFE65BF6, 0xFFE459F4, 0xFFFA68FF, 0xFFEB59FC, 0xFFDF3AF0, 0xFFDD38EE,
		0xFFE843F5, 0xFFE245F4, 0xFFDC3FEE, 0xFFDE3EF6, 0xFFE545FD, 0xFFF045FF, 0xFFE73CFF, 0xFFEE3DFF, 0xFFEB3AFF, 0xFFD026F8, 0xFFC91FF1, 0xFFC522ED, 0xFFBB18E3, 0xFFBF05FF, 0xFFBF05FF,
		0xFFE944F6, 0xFFE649F8, 0xFFFF66FF, 0xFFFF61FF, 0xFFDF3FF7, 0xFFC61BE5, 0xFFCE23ED, 0xFFCB1AEF, 0xFFC514E9, 0xFFC51BED, 0xFFBF15E7, 0xFFB613DE, 0xFFC320EB, 0xFFBA00FF, 0xFFBC02FF,
	};
	memcpy(save, data, sizeof(data));
}

// 获取魔魂晶石像素信息
void PrintScreen::GetMoHunPixelData(int save[255])
{
	int data[] =
	{
		0xFF784F3B, 0xFFC3B77B, 0xFFB0A468, 0xFF9E964D, 0xFF8B833A, 0xFF935643, 0xFF7D402D, 0xFFA47E13, 0xFFBB952A, 0xFF3F2419, 0xFF33180D, 0xFF745800, 0xFFE0C456, 0xFFC7AF71, 0xFF745C1E,
		0xFFD5AF64, 0xFFEEE179, 0xFFEEE179, 0xFF998C30, 0xFFF3E68A, 0xFFB87854, 0xFF844420, 0xFFBF8A46, 0xFF8A5511, 0xFF2C0E00, 0xFF422400, 0xFF7E5D00, 0xFFF3D24F, 0xFF6F6444, 0xFF3B3010,
		0xFFFDD78C, 0xFFF5E880, 0xFFF7EA82, 0xFFBDB054, 0xFFF7EA8E, 0xFFAB6B47, 0xFF9A5A36, 0xFF9D6824, 0xFF683300, 0xFF472905, 0xFF422400, 0xFFB2910E, 0xFFEAC946, 0xFF362B0B, 0xFF382D0D,
		0xFFF3DA63, 0xFFFBF28B, 0xFFCFC65F, 0xFFC6B56F, 0xFFFCEBA5, 0xFFB67D16, 0xFF925900, 0xFF89451E, 0xFF96522B, 0xFF472700, 0xFF6E4E00, 0xFFF1C04A, 0xFFB88711, 0xFF181700, 0xFF343314,
		0xFFE4CB54, 0xFFBFB64F, 0xFFB7AE47, 0xFFB3A25C, 0xFFFFF0AA, 0xFFCE952E, 0xFF7A4100, 0xFF5C1800, 0xFF430000, 0xFF4D2D00, 0xFFDDBD56, 0xFFF4C34D, 0xFF4C1B00, 0xFF212001, 0xFF0B0A00,
		0xFFF4E258, 0xFFBFB27D, 0xFF9F925D, 0xFFA59071, 0xFFFBE6C7, 0xFFDFB01C, 0xFF936400, 0xFF561800, 0xFF602200, 0xFFA78F0B, 0xFFD2BA36, 0xFF986120, 0xFF501900, 0xFF676518, 0xFF636114,
		0xFFF3E157, 0xFFD6C994, 0xFF998C57, 0xFFB19C7D, 0xFFEAD5B6, 0xFFFFD13D, 0xFFF0C12D, 0xFFBD7F42, 0xFFE8AA6D, 0xFFDFC743, 0xFF685000, 0xFF4E1700, 0xFF824B0A, 0xFF5F5D10, 0xFF9F9D50,
		0xFFE6CB3E, 0xFFE5CFA8, 0xFFC5AF88, 0xFFCEB9A6, 0xFFF0DBC8, 0xFFCC9E2F, 0xFFCB9D2E, 0xFFD1A755, 0xFFDDB361, 0xFF7E6F1E, 0xFF342500, 0xFF5F3A10, 0xFF815C32, 0xFF9F8A15, 0xFFECD762,
		0xFFE7CC3F, 0xFFF0DAB3, 0xFFE2CCA5, 0xFFBCA794, 0xFFE2CDBA, 0xFF8A5C00, 0xFF5E3000, 0xFF7B5100, 0xFF754B00, 0xFF3E2F00, 0xFF403100, 0xFF6D481E, 0xFFC19C72, 0xFFE6D15C, 0xFFF7E26D,
		0xFFF2CB3F, 0xFFD8C080, 0xFFC0A868, 0xFF998761, 0xFFA4926C, 0xFF7F4B26, 0xFF4E1A00, 0xFF492B00, 0xFF472900, 0xFF3E372D, 0xFF453E34, 0xFF675A23, 0xFFEBDEA7, 0xFFFFE15B, 0xFFFAD24C,
		0xFFF7D044, 0xFFAC9454, 0xFF9A8242, 0xFFB4A27C, 0xFF816F49, 0xFF521E00, 0xFF562200, 0xFF492B00, 0xFF442600, 0xFF312A20, 0xFF635C52, 0xFFB8AB74, 0xFFDDD099, 0xFFF8D04A, 0xFFFFE761,
		0xFFE9B164, 0xFFC48F3F, 0xFF9C6717, 0xFFB0835C, 0xFF90633C, 0xFF543219, 0xFF48260D, 0xFF523A00, 0xFF563E00, 0xFF94761E, 0xFFD1B35B, 0xFFFFE286, 0xFFF9D074, 0xFFB2B4A7, 0xFFEEF0E3,
		0xFFE5AD60, 0xFFE5B060, 0xFF9D6818, 0xFFAC7F58, 0xFF986B44, 0xFF5C3A21, 0xFF5E3C23, 0xFF563E00, 0xFF80682A, 0xFFECCE76, 0xFFFFE189, 0xFFDBB256, 0xFFBE9539, 0xFFEFF1E4, 0xFFECEEE1,
		0xFFE3BB37, 0xFFF4D018, 0xFFFEDA22, 0xFFAA8B00, 0xFF9D7E00, 0xFF5E4A00, 0xFF836F00, 0xFFA29A00, 0xFFDDD534, 0xFFF6E65F, 0xFFCEBE37, 0xFFBDA425, 0xFFF4DB5C, 0xFFFDFFE8, 0xFFFCFFE7,
		0xFF966E00, 0xFFD3AF00, 0xFFEDC911, 0xFFEDCE38, 0xFFE1C22C, 0xFFDCC841, 0xFFDECA43, 0xFFE4DC3B, 0xFFF1E948, 0xFFC1B12A, 0xFFBBAB24, 0xFFD7BE3F, 0xFFFDE465, 0xFFDDE1C8, 0xFFFFFFEA,
	};
	memcpy(save, data, sizeof(data));
}

// 获取灵魂晶石像素信息
void PrintScreen::GetLingHunPixelData(int save[255])
{
	int data[] =
	{
		0xFF390400, 0xFFAE7D45, 0xFFC3925A, 0xFF4A1200, 0xFF420A00, 0xFF390000, 0xFF400400, 0xFF450513, 0xFF450513, 0xFF430A00, 0xFF410800, 0xFF3A0002, 0xFF340000, 0xFF4B0000, 0xFF56000B,
		0xFF6C3727, 0xFFF7C68E, 0xFF83521A, 0xFF470F00, 0xFF511900, 0xFF460A02, 0xFF420600, 0xFF3C000A, 0xFF390007, 0xFF3B0200, 0xFF3F0600, 0xFF410409, 0xFF42050A, 0xFF630618, 0xFF4E0003,
		0xFFE9AF4C, 0xFFF5B47E, 0xFF4D0C00, 0xFF3F0000, 0xFF430000, 0xFF3B0003, 0xFF3B0003, 0xFF35000A, 0xFF36000B, 0xFF2F0207, 0xFF2E0106, 0xFF2A0701, 0xFF2E0B05, 0xFF320001, 0xFF300000,
		0xFFFFDA77, 0xFFBB7A44, 0xFF450400, 0xFF410000, 0xFF3F0000, 0xFF3B0003, 0xFF3A0002, 0xFF330008, 0xFF330008, 0xFF2C0004, 0xFF2C0004, 0xFF270400, 0xFF2A0701, 0xFF3B090A, 0xFF2F0000,
		0xFFD2B861, 0xFF311800, 0xFF180000, 0xFF290E00, 0xFF2C1100, 0xFF230306, 0xFF230306, 0xFF270007, 0xFF250005, 0xFF2B0000, 0xFF2D0001, 0xFF320000, 0xFF320000, 0xFF3E0106, 0xFF360000,
		0xFFA0862F, 0xFF250C00, 0xFF371E00, 0xFF2E1300, 0xFF260B00, 0xFF220205, 0xFF230306, 0xFF260006, 0xFF250005, 0xFF2C0000, 0xFF310305, 0xFF380501, 0xFF360300, 0xFF42050A, 0xFF400308,
		0xFF7F1100, 0xFF420000, 0xFF4F0100, 0xFF240000, 0xFF270000, 0xFF290008, 0xFF2A0009, 0xFF2F0005, 0xFF2D0003, 0xFF3E0000, 0xFF470509, 0xFF550504, 0xFF510100, 0xFF380806, 0xFF390907,
		0xFF5A0000, 0xFF4D0000, 0xFF4A0000, 0xFF2F0000, 0xFF471317, 0xFF280007, 0xFF2A0009, 0xFF2F0005, 0xFF2D0003, 0xFF3F0001, 0xFF4C0A0E, 0xFF5A0A09, 0xFF560605, 0xFF330301, 0xFF320200,
		0xFF410300, 0xFF2C0F07, 0xFF1E0100, 0xFF0C0201, 0xFF100605, 0xFF170408, 0xFF1A070B, 0xFF2E0001, 0xFF2B0000, 0xFF510000, 0xFF600109, 0xFF790004, 0xFF720000, 0xFF330D04, 0xFF2F0900,
		0xFF4B0D00, 0xFF1E0100, 0xFF210400, 0xFF201615, 0xFF110706, 0xFF160307, 0xFF19060A, 0xFF2D0000, 0xFF280000, 0xFF4E0000, 0xFF5E0007, 0xFF760001, 0xFF6E0000, 0xFF310B02, 0xFF2E0800,
		0xFF660004, 0xFF3E0008, 0xFF3C0006, 0xFF1E0509, 0xFF1E0509, 0xFF1A0F0D, 0xFF130806, 0xFF180000, 0xFF1A0000, 0xFF3C0100, 0xFF450A04, 0xFF520200, 0xFF4B0000, 0xFF590306, 0xFF4F0000,
		0xFF610000, 0xFF3A0004, 0xFF3C0006, 0xFF1F060A, 0xFF1A0105, 0xFF120705, 0xFF100503, 0xFF1D0100, 0xFF230703, 0xFF440903, 0xFF50150F, 0xFF64140B, 0xFF65150C, 0xFF3E0000, 0xFF5D070A,
		0xFF580000, 0xFF3F0000, 0xFF450002, 0xFF360004, 0xFF2D0000, 0xFF340000, 0xFF360001, 0xFF4C0000, 0xFF540007, 0xFF720008, 0xFF7C0612, 0xFF960816, 0xFF9D0F1D, 0xFFB02135, 0xFF830008,
		0xFF600004, 0xFF420000, 0xFF470004, 0xFF380006, 0xFF300000, 0xFF370002, 0xFF370002, 0xFF4C0000, 0xFF510004, 0xFF6B0001, 0xFF6E0004, 0xFF850005, 0xFF8B000B, 0xFFA31428, 0xFF9B0C20,
		0xFF6C0506, 0xFF4C0000, 0xFF4A0000, 0xFF390400, 0xFF350000, 0xFF280000, 0xFF240000, 0xFF240000, 0xFF2B0500, 0xFF310500, 0xFF2E0200, 0xFF310000, 0xFF340300, 0xFF79000A, 0xFF6B0000,
	};
	memcpy(save, data, sizeof(data));
}

// 获取青螭礼包像素信息
void PrintScreen::GetQingChiPixelData(int save[255])
{
	int data[] =
	{
		0xFFC8CE52, 0xFFDDE367, 0xFFDFE058, 0xFFDBDC54, 0xFFD2CD3D, 0xFFD0CB3B, 0xFFD8D548, 0xFFBCB92C, 0xFFB5B136, 0xFFACA82D, 0xFFD0C559, 0xFFDDD266, 0xFFFFE77D, 0xFFD7BF55, 0xFFCEA83D,
		0xFFACAF2E, 0xFFD2D554, 0xFFE5E454, 0xFFDFDE4E, 0xFFDAD53D, 0xFFE2DD45, 0xFFE3DB52, 0xFFBCB42B, 0xFF8F8516, 0xFFCBC152, 0xFFD5C065, 0xFFC1AC51, 0xFFF8D476, 0xFFD2AE50, 0xFFC7942B,
		0xFF929514, 0xFFB7BA39, 0xFFD9D848, 0xFFDDDC4C, 0xFFD9D43C, 0xFFD6D139, 0xFFBFB72E, 0xFF8F8700, 0xFF796F00, 0xFFBFB546, 0xFFAA953A, 0xFF836E13, 0xFFD2AE50, 0xFFD4B052, 0xFFD19E35,
		0xFF8F8E1A, 0xFFA1A02C, 0xFFCCC541, 0xFFDFD854, 0xFFDCD346, 0xFFCDC437, 0xFFA79B23, 0xFF817500, 0xFFAE9E49, 0xFFB4A44F, 0xFF8A6C2E, 0xFF67490B, 0xFFB07F3C, 0xFFCA9956, 0xFFE1A04E,
		0xFF999824, 0xFF989723, 0xFFC1BA36, 0xFFD6CF4B, 0xFFD6CD40, 0xFFC6BD30, 0xFFA69A22, 0xFF958911, 0xFFBEAE59, 0xFF867621, 0xFF755719, 0xFF735517, 0xFFA67532, 0xFFB78643, 0xFFDB9A48,
		0xFF9B9632, 0xFF98932F, 0xFFC4BB46, 0xFFD6CD58, 0xFFD9CB4E, 0xFFD7C94C, 0xFFC5B34F, 0xFFC6B450, 0xFFA08A4E, 0xFF604A0E, 0xFF744E29, 0xFF7E5833, 0xFFAC7346, 0xFFBC8356, 0xFFD28B4B,
		0xFF938E2A, 0xFF9A9531, 0xFFD1C853, 0xFFE3DA65, 0xFFEBDD60, 0xFFF8EA6D, 0xFFF2E07C, 0xFFFDEB87, 0xFFA28C50, 0xFF6D571B, 0xFF835D38, 0xFF724C27, 0xFFA36A3D, 0xFFC78E61, 0xFFCE8747,
		0xFFADAA37, 0xFFD1CE5B, 0xFFF1F471, 0xFFEDF06D, 0xFFEBF36A, 0xFFBFC73E, 0xFFADAF42, 0xFFAFB144, 0xFF796727, 0xFF5F4D0D, 0xFF80552A, 0xFF70451A, 0xFFA26429, 0xFFC7894E, 0xFFAE6612,
		0xFFB1AE3B, 0xFFE9E673, 0xFFFFFF80, 0xFFCED14E, 0xFFC0C83F, 0xFFB7BF36, 0xFFA1A336, 0xFF6B6D00, 0xFF6F5D1D, 0xFF5E4C0C, 0xFF764B20, 0xFF7D5227, 0xFFAB6D32, 0xFFC18348, 0xFFC47C28,
		0xFF9A8720, 0xFFB9A63F, 0xFFDFD55C, 0xFFCEC44B, 0xFFC2BE43, 0xFFC2BE43, 0xFFC6C25F, 0xFFA4A03D, 0xFF6A5A1C, 0xFF5D4D0F, 0xFF634415, 0xFF755627, 0xFF9E7233, 0xFFAE8243, 0xFFCD9B44,
		0xFF927F18, 0xFF94811A, 0xFFC9BF46, 0xFFDDD35A, 0xFFCDC94E, 0xFFC4C045, 0xFFE1DD7A, 0xFFDCD875, 0xFF7B6B2D, 0xFF68581A, 0xFF6F5021, 0xFF705122, 0xFFA17536, 0xFFC5995A, 0xFFE5B35C,
		0xFF97781E, 0xFFA4852B, 0xFFD9C25C, 0xFFDEC761, 0xFFD1C35A, 0xFFDED067, 0xFFE9DF88, 0xFFB4AA53, 0xFF706126, 0xFF58490E, 0xFF6A5422, 0xFF56400E, 0xFF997C3A, 0xFFD7BA78, 0xFFD8B95F,
		0xFF917218, 0xFF9A7B21, 0xFFC7B04A, 0xFFD3BC56, 0xFFDDCF66, 0xFFEDDF76, 0xFFD4CA73, 0xFF776D16, 0xFF5E4F14, 0xFF4D3E03, 0xFF67511F, 0xFF56400E, 0xFFB79A58, 0xFFF7DA98, 0xFFE2C369,
		0xFF9E8533, 0xFF947B29, 0xFFB8A44D, 0xFFD3BF68, 0xFFE7D782, 0xFFDDCD78, 0xFFB4A35D, 0xFF61500A, 0xFF69541F, 0xFF644F1A, 0xFF6B4F1D, 0xFF725624, 0xFFEACB8A, 0xFFFFF4B3, 0xFFFFE592,
		0xFF957C2A, 0xFF9B8230, 0xFFC0AC55, 0xFFCFBB64, 0xFFE2D27D, 0xFFDDCD78, 0xFFBDAC66, 0xFF74631D, 0xFF634E19, 0xFF644F1A, 0xFF513503, 0xFF6E5220, 0xFFF3D493, 0xFFFFE5A4, 0xFFFFEC99,
	};
	memcpy(save, data, sizeof(data));
}

// 获取紫冥礼包像素信息
void PrintScreen::GetZiMingPixelData(int save[255])
{
	int data[] =
	{
		0xFFCC795B, 0xFFDB886A, 0xFFC56944, 0xFFCD714C, 0xFFCD6C41, 0xFFDE7D52, 0xFFD67F52, 0xFFBF683B, 0xFF743107, 0xFF7C390F, 0xFFC79069, 0xFFEAB38C, 0xFFFFC59B, 0xFFB87D53, 0xFF9D5B2B,
		0xFFA5532D, 0xFFC87650, 0xFFD37349, 0xFFD9794F, 0xFFDA7346, 0xFFE37C4F, 0xFFCD7246, 0xFFAC5125, 0xFF844019, 0xFFA15D36, 0xFFD49A75, 0xFF965C37, 0xFFF4AE8A, 0xFFCF8965, 0xFFA24A24,
		0xFF9F4D27, 0xFFB7653F, 0xFFCA6A40, 0xFFCF6F45, 0xFFD36C3F, 0xFFD87144, 0xFFC1663A, 0xFFA94E22, 0xFF7F3B14, 0xFFD28E67, 0xFFA96F4A, 0xFF6C320D, 0xFFB9734F, 0xFFC57F5B, 0xFFB65E38,
		0xFFA35733, 0xFF9F532F, 0xFFBA5C38, 0xFFC96B47, 0xFFE27755, 0xFFD36846, 0xFFA14327, 0xFF802206, 0xFFA6624B, 0xFFB36F58, 0xFF591A09, 0xFF602110, 0xFFAC594B, 0xFFBF6C5E, 0xFFCA5C4F,
		0xFF9A4E2A, 0xFF964A26, 0xFFBE603C, 0xFFC0623E, 0xFFCC613F, 0xFFB34826, 0xFF8F3115, 0xFF86280C, 0xFF9B5740, 0xFF823E27, 0xFF703120, 0xFF682918, 0xFF8E3B2D, 0xFF9C493B, 0xFFC25447,
		0xFF985133, 0xFF9F583A, 0xFFD07258, 0xFFB3553B, 0xFFB64934, 0xFFB94C37, 0xFFCD6D5D, 0xFFF29282, 0xFF99524C, 0xFF69221C, 0xFF611F20, 0xFF551314, 0xFF993A40, 0xFFC96A70, 0xFFD1535E,
		0xFF934C2E, 0xFFAD6648, 0xFFF2947A, 0xFFD6785E, 0xFFDD705B, 0xFFDD705B, 0xFFE18171, 0xFFF29282, 0xFF7D3630, 0xFF6D2620, 0xFF561415, 0xFF6D2B2C, 0xFF993A40, 0xFFC16268, 0xFFC84A55,
		0xFFAF733D, 0xFFE4A872, 0xFFF7CE90, 0xFFE3BA7C, 0xFFCC704B, 0xFFC76B46, 0xFFAE4740, 0xFFAE4740, 0xFF5A2E2F, 0xFF542829, 0xFF652533, 0xFF642432, 0xFFC34654, 0xFFDE616F, 0xFFB43E32,
		0xFFB0743E, 0xFFF9BD87, 0xFFFFDD9F, 0xFFC09759, 0xFFA94D28, 0xFFBD613C, 0xFFA74039, 0xFF7D160F, 0xFF55292A, 0xFF4D2122, 0xFF5C1C2A, 0xFF60202E, 0xFFC54856, 0xFFC64957, 0xFFC85246,
		0xFF94491F, 0xFFC2774D, 0xFFE1A475, 0xFFB07344, 0xFFA03C22, 0xFFA64228, 0xFFB04A46, 0xFFAD4743, 0xFF5D3132, 0xFF502425, 0xFF592228, 0xFF5F282E, 0xFFBF585C, 0xFFB14A4E, 0xFFD77663,
		0xFF853A10, 0xFF93481E, 0xFFC58859, 0xFFB77A4B, 0xFFB34F35, 0xFFA54127, 0xFFD26C68, 0xFFFE9894, 0xFF5F3334, 0xFF4F2324, 0xFF5C252B, 0xFF5E272D, 0xFFB95256, 0xFFC76064, 0xFFDE7D6A,
		0xFF943D22, 0xFFA85136, 0xFFD8886D, 0xFFB9694E, 0xFFAC463A, 0xFFAE483C, 0xFFC56567, 0xFFC56567, 0xFF562626, 0xFF471717, 0xFF532120, 0xFF501E1D, 0xFFA3534C, 0xFFE5958E, 0xFFCC7F65,
		0xFF913A1F, 0xFF994227, 0xFFBD6D52, 0xFFAE5E43, 0xFFAB4539, 0xFFB95347, 0xFFA8484A, 0xFF79191B, 0xFF512121, 0xFF481818, 0xFF532120, 0xFF552322, 0xFFBF6F68, 0xFFFFCCC5, 0xFFDD9076,
		0xFF8B3D29, 0xFF80321E, 0xFFA35445, 0xFFBA6B5C, 0xFFB35857, 0xFFC36867, 0xFFA24D52, 0xFF741F24, 0xFF581E1D, 0xFF581E1D, 0xFF561D16, 0xFF632A23, 0xFFE9A192, 0xFFFFE8D9, 0xFFF6AA92,
		0xFF893B27, 0xFF893B27, 0xFFA75849, 0xFFB8695A, 0xFFA24746, 0xFFC06564, 0xFFA14C51, 0xFF721D22, 0xFF521817, 0xFF561C1B, 0xFF491009, 0xFF5F261F, 0xFFFFBAAB, 0xFFFFDDCE, 0xFFFEB29A,
	};
	memcpy(save, data, sizeof(data));
}

// 获取卡迪礼包像素信息
void PrintScreen::GetKaDiPixelData(int save[255])
{
	int data[] =
	{
		0xFFC6D0F4, 0xFFD0DAFE, 0xFFDBE4FF, 0xFFDAE3FF, 0xFFCCD9FF, 0xFFBFCCF6, 0xFFB3C4F2, 0xFFB0C1EF, 0xFF96ABE0, 0xFF9BB0E5, 0xFFA6BEFA, 0xFFA6BEFA, 0xFF92AFF1, 0xFF8DAAEC, 0xFF95B3F9,
		0xFFBECAFC, 0xFFC4D0FF, 0xFFC9D4FF, 0xFFC6D1FF, 0xFFBCC6FF, 0xFFB2BCF9, 0xFFAAB8F9, 0xFFA9B7F8, 0xFFB0C1FF, 0xFFB8C9FF, 0xFFB2C9FF, 0xFF93AAEE, 0xFF6E8BCF, 0xFF6C89CD, 0xFF6D8ED1,
		0xFFBFCBFD, 0xFFBECAFC, 0xFFBAC5FB, 0xFFB3BEF4, 0xFFADB7F4, 0xFFABB5F2, 0xFFABB9FA, 0xFFAFBDFE, 0xFFB3C4FF, 0xFFAEBFFF, 0xFF9CB3F7, 0xFF7F96DA, 0xFF6784C8, 0xFF6D8ACE, 0xFF6C8DD0,
		0xFFBDD1F6, 0xFFBACEF3, 0xFFB6C7F5, 0xFFB2C3F1, 0xFFB3BFF9, 0xFFB5C1FB, 0xFFBAC4FF, 0xFFBDC7FF, 0xFFA2AFFD, 0xFF93A0EE, 0xFF8497E6, 0xFF7A8DDC, 0xFF6C86D3, 0xFF738DDA, 0xFF7A97E3,
		0xFFC6DAFF, 0xFFC4D8FD, 0xFFC2D3FF, 0xFFC0D1FF, 0xFFBECAFF, 0xFFB9C5FF, 0xFFB2BCFF, 0xFFADB7FE, 0xFF9AA7F5, 0xFF8B98E6, 0xFF8194E3, 0xFF7A8DDC, 0xFF627CC9, 0xFF5A74C1, 0xFF627FCB,
		0xFFCAE5F8, 0xFFC7E2F5, 0xFFC4DBFA, 0xFFC0D7F6, 0xFFBCCCFD, 0xFFB1C1F2, 0xFFA4B2F3, 0xFF9AA8E9, 0xFF8E9BEA, 0xFF808DDC, 0xFF7989E0, 0xFF7686DD, 0xFF627AD2, 0xFF5C74CC, 0xFF5E79D0,
		0xFFC7E2F5, 0xFFC2DDF0, 0xFFBED5F4, 0xFFBAD1F0, 0xFFBACAFB, 0xFFB4C4F5, 0xFFABB9FA, 0xFFA4B2F3, 0xFF9AA7F6, 0xFF8693E2, 0xFF7787DE, 0xFF7585DC, 0xFF6E86DE, 0xFF7189E1, 0xFF6782D9,
		0xFFB5CBF0, 0xFFC7DDFF, 0xFFBBD3FF, 0xFFC5DDFF, 0xFFBDDBFF, 0xFFB4D2FF, 0xFF89ABEB, 0xFF84A6E6, 0xFF799EE5, 0xFF7095DC, 0xFF6D93DC, 0xFF688ED7, 0xFF5D81CB, 0xFF5D81CB, 0xFF6186CD,
		0xFFA7BDE2, 0xFFADC3E8, 0xFF9EB6E2, 0xFFA9C1ED, 0xFFA6C4FA, 0xFFACCAFF, 0xFF87A9E9, 0xFF7698D8, 0xFF7196DD, 0xFF6A8FD6, 0xFF6C92DB, 0xFF6D93DC, 0xFF668AD4, 0xFF668AD4, 0xFF678CD3,
		0xFFA3C7F7, 0xFFA2C6F6, 0xFF94BCEF, 0xFF9AC2F5, 0xFF8DB7F3, 0xFF9CC6FF, 0xFF82B2F4, 0xFF6A9ADC, 0xFF6394D9, 0xFF6091D6, 0xFF6797DF, 0xFF6B9BE3, 0xFF6495DA, 0xFF6394D9, 0xFF6493D7,
		0xFF95B9E9, 0xFF99BDED, 0xFF96BEF1, 0xFF97BFF2, 0xFF7AA4E0, 0xFF8BB5F1, 0xFF7CACEE, 0xFF6595D7, 0xFF6091D6, 0xFF6091D6, 0xFF6898E0, 0xFF6B9BE3, 0xFF6394D9, 0xFF6495DA, 0xFF6A99DD,
		0xFF7EB0EB, 0xFF80B2ED, 0xFF81B5F1, 0xFF89BDF9, 0xFF72AAE7, 0xFF85BDFA, 0xFF79B5F3, 0xFF629EDC, 0xFF528FCE, 0xFF5390CF, 0xFF5E9CD9, 0xFF62A0DD, 0xFF5D99D5, 0xFF64A0DC, 0xFF74AFEB,
		0xFF88BAF5, 0xFF80B2ED, 0xFF74A8E4, 0xFF81B5F1, 0xFF79B1EE, 0xFF89C1FE, 0xFF74B0EE, 0xFF629EDC, 0xFF528FCE, 0xFF518ECD, 0xFF5C9AD7, 0xFF66A4E1, 0xFF6AA6E2, 0xFF77B3EF, 0xFF87C2FE,
		0xFF84B5F7, 0xFF7FB0F2, 0xFF679DDB, 0xFF6FA5E3, 0xFF68A3DD, 0xFF6EA9E3, 0xFF609DD3, 0xFF69A6DC, 0xFF65A5D5, 0xFF5E9ECE, 0xFF66A4D3, 0xFF76B4E3, 0xFF81BEED, 0xFF8CC9F8, 0xFF8FC9F9,
		0xFF7FB0F2, 0xFF89BAFC, 0xFF74AAE8, 0xFF75ABE9, 0xFF66A1DB, 0xFF66A1DB, 0xFF69A6DC, 0xFF93D0FF, 0xFF7DBDED, 0xFF6FAFDF, 0xFF73B1E0, 0xFF84C2F1, 0xFF92CFFE, 0xFF96D3FF, 0xFF88C2F2,
	};
	memcpy(save, data, sizeof(data));
}

// 获取亚尔礼包像素信息
void PrintScreen::GetYaErPixelData(int save[255])
{
	int data[] =
	{
		0xFF161A37, 0xFF151936, 0xFF212542, 0xFF595D7A, 0xFF545875, 0xFF181C39, 0xFF0F1330, 0xFF111532, 0xFF151936, 0xFF141835, 0xFF131732, 0xFF141833, 0xFF161A35, 0xFF161A35, 0xFF141833,
		0xFF151837, 0xFF242746, 0xFF333655, 0xFF6B6E8D, 0xFF4C506D, 0xFF070B28, 0xFF181C39, 0xFF111532, 0xFF191D38, 0xFF171B36, 0xFF151934, 0xFF171B36, 0xFF1A1E37, 0xFF1B1F38, 0xFF191D36,
		0xFF181B3A, 0xFF222544, 0xFF484B6A, 0xFF727594, 0xFF464A67, 0xFF0F1330, 0xFF191D3A, 0xFF141835, 0xFF131732, 0xFF131732, 0xFF141833, 0xFF141833, 0xFF151932, 0xFF151932, 0xFF141831,
		0xFF16193A, 0xFF121536, 0xFF555879, 0xFF707394, 0xFF4B4E6D, 0xFF2B2E4D, 0xFF111532, 0xFF0E122F, 0xFF141833, 0xFF171B36, 0xFF1A1E37, 0xFF191D36, 0xFF161A33, 0xFF151932, 0xFF181D33,
		0xFF171A3B, 0xFF0D1031, 0xFF555879, 0xFF6C6F90, 0xFF606382, 0xFF525574, 0xFF1E223F, 0xFF1A1E3B, 0xFF171B36, 0xFF161A35, 0xFF141831, 0xFF12162F, 0xFF11152E, 0xFF161A33, 0xFF1D2238,
		0xFF181B3C, 0xFF141738, 0xFF3F4263, 0xFF5B5E7F, 0xFF6E7190, 0xFF6E7190, 0xFF494D6A, 0xFF434764, 0xFF2C304B, 0xFF212540, 0xFF151932, 0xFF12162F, 0xFF1B2036, 0xFF2A2F45, 0xFF363B51,
		0xFF16193A, 0xFF181B3C, 0xFF202344, 0xFF434667, 0xFF6B6E8D, 0xFF757897, 0xFF6E728F, 0xFF6A6E8B, 0xFF6B6F8A, 0xFF565A75, 0xFF41455E, 0xFF3F435C, 0xFF50556B, 0xFF676C82, 0xFF767B91,
		0xFF455475, 0xFF485778, 0xFF3D4D6E, 0xFF384869, 0xFF445976, 0xFF516683, 0xFF506A85, 0xFF536D88, 0xFF59758D, 0xFF5B778F, 0xFF5E788F, 0xFF5E788F, 0xFF5F778F, 0xFF617991, 0xFF637B93,
		0xFF697899, 0xFF6D7C9D, 0xFF637394, 0xFF576788, 0xFF586D8A, 0xFF607592, 0xFF607A95, 0xFF647E99, 0xFF5B778F, 0xFF5D7991, 0xFF5F7990, 0xFF607A91, 0xFF617991, 0xFF627A92, 0xFF657D95,
		0xFF5A6487, 0xFF697396, 0xFF6F7E9D, 0xFF6A7998, 0xFF647996, 0xFF657A97, 0xFF5E7A92, 0xFF58748C, 0xFF5B7B92, 0xFF5C7C93, 0xFF5B7E92, 0xFF5B7E92, 0xFF5B7E92, 0xFF5D8094, 0xFF618498,
		0xFF394366, 0xFF485275, 0xFF566584, 0xFF5B6A89, 0xFF5A6F8C, 0xFF687D9A, 0xFF6A869E, 0xFF627E96, 0xFF5D7D94, 0xFF5E7E95, 0xFF5C7F93, 0xFF5C7F93, 0xFF5C7F93, 0xFF5E8195, 0xFF628599,
		0xFF161F40, 0xFF151E3F, 0xFF172444, 0xFF172444, 0xFF1A324E, 0xFF425A76, 0xFF5C7F95, 0xFF5C7F95, 0xFF588394, 0xFF598495, 0xFF568595, 0xFF558494, 0xFF528693, 0xFF548895, 0xFF598D9A,
		0xFF242D4E, 0xFF1C2546, 0xFF1C2949, 0xFF1A2747, 0xFF1A324E, 0xFF4B637F, 0xFF6D90A6, 0xFF6A8DA3, 0xFF5B8697, 0xFF5C8798, 0xFF588797, 0xFF578696, 0xFF548895, 0xFF578B98, 0xFF5C909D,
		0xFF1B2848, 0xFF182545, 0xFF20344F, 0xFF1D314C, 0xFF13334A, 0xFF3F5F76, 0xFF5E8C9C, 0xFF568494, 0xFF578F9C, 0xFF578F9C, 0xFF51919A, 0xFF509099, 0xFF4D9299, 0xFF50959C, 0xFF549BA1,
		0xFF233050, 0xFF1F2C4C, 0xFF243853, 0xFF1B2F4A, 0xFF092940, 0xFF37576E, 0xFF5F8D9D, 0xFF5D8B9B, 0xFF5A929F, 0xFF5A929F, 0xFF54949D, 0xFF52929B, 0xFF4F949B, 0xFF53989F, 0xFF579EA4,
	};
	memcpy(save, data, sizeof(data));
}

// 获取穆巴礼包像素信息
void PrintScreen::GetMuBaPixelData(int save[255])
{
	int data[] =
	{
		0xFFF8E4BF, 0xFFFCE8C3, 0xFFFFECBA, 0xFFF9E5B3, 0xFFF0D995, 0xFFE6CF8B, 0xFFE7CE72, 0xFFE8CF73, 0xFFE8C85B, 0xFFEECE61, 0xFFF6CC54, 0xFFEDC34B, 0xFFEBB83B, 0xFFEBB83B, 0xFFEFB839,
		0xFFEFD9A7, 0xFFF3DDAB, 0xFFF8E0A4, 0xFFF2DA9E, 0xFFEFCF82, 0xFFE9C97C, 0xFFF2CA6B, 0xFFF6CE6F, 0xFFFFCF62, 0xFFFFCD60, 0xFFFFBF4B, 0xFFF0AF3B, 0xFFE99E27, 0xFFE59A23, 0xFFE99822,
		0xFFE6D09E, 0xFFE7D19F, 0xFFE9D195, 0xFFE8D094, 0xFFEDCD80, 0xFFEECE81, 0xFFF8D071, 0xFFFBD374, 0xFFFFCE61, 0xFFFCC85B, 0xFFF9B844, 0xFFE9A834, 0xFFE59A23, 0xFFE0951E, 0xFFE4931D,
		0xFFEEE097, 0xFFE8DA91, 0xFFE9D483, 0xFFE9D483, 0xFFF6D578, 0xFFF8D77A, 0xFFFFD26A, 0xFFFECF67, 0xFFF7B847, 0xFFF0B140, 0xFFF3A330, 0xFFED9D2A, 0xFFF19725, 0xFFF09624, 0xFFF69425,
		0xFFF9EBA2, 0xFFF2E49B, 0xFFF0DB8A, 0xFFEDD887, 0xFFF6D578, 0xFFF3D275, 0xFFF6C75F, 0xFFEFC058, 0xFFEFB03F, 0xFFE7A837, 0xFFEC9C29, 0xFFEA9A27, 0xFFF09624, 0xFFED9321, 0xFFF08E1F,
		0xFFF1EA8F, 0xFFF0E98E, 0xFFF3E584, 0xFFEFE180, 0xFFF2D56D, 0xFFEACD65, 0xFFF0C051, 0xFFEBBB4C, 0xFFF8B542, 0xFFECA936, 0xFFEF9B29, 0xFFEE9A28, 0xFFF79528, 0xFFF29023, 0xFFF2891E,
		0xFFE8E186, 0xFFEFE88D, 0xFFF9EB8A, 0xFFF6E887, 0xFFF6D971, 0xFFEDD068, 0xFFF7C758, 0xFFF7C758, 0xFFF6B340, 0xFFE9A633, 0xFFEE9A28, 0xFFF19D2B, 0xFFFD9B2E, 0xFFFB992C, 0xFFFE952A,
		0xFFEADD77, 0xFFEEE17B, 0xFFFAE276, 0xFFFAE276, 0xFFFFD761, 0xFFF4CB55, 0xFFF3BA37, 0xFFEAB12E, 0xFFF0AB20, 0xFFEEA91E, 0xFFF3AB1B, 0xFFF5AD1D, 0xFFF0A816, 0xFFECA412, 0xFFEDA918,
		0xFFE3D670, 0xFFE4D771, 0xFFEDD569, 0xFFEDD569, 0xFFF6CD57, 0xFFECC34D, 0xFFEDB431, 0xFFE4AB28, 0xFFF2AD22, 0xFFF1AC21, 0xFFF8B020, 0xFFFCB424, 0xFFFBB321, 0xFFF8B01E, 0xFFF8B423,
		0xFFF6CD61, 0xFFF4CB5F, 0xFFF6C954, 0xFFF7CA55, 0xFFFFC84A, 0xFFF9C244, 0xFFF3B52C, 0xFFEAAC23, 0xFFF2B11F, 0xFFF4B321, 0xFFF6BB23, 0xFFFBC028, 0xFFF6C028, 0xFFF5BF27, 0xFFF5C32C,
		0xFFF5CC60, 0xFFF1C85C, 0xFFF3C651, 0xFFF6C954, 0xFFFFCB4D, 0xFFFEC749, 0xFFF9BB32, 0xFFEEB027, 0xFFF2B11F, 0xFFF8B725, 0xFFFBC028, 0xFFFCC129, 0xFFF5BF27, 0xFFF5BF27, 0xFFF9C730,
		0xFFFDC043, 0xFFFABD40, 0xFFFABE3A, 0xFFFFC33F, 0xFFFFC93B, 0xFFFFC638, 0xFFF7BE27, 0xFFEEB51E, 0xFFE8B317, 0xFFF2BD21, 0xFFF2C828, 0xFFF1C727, 0xFFE6C626, 0xFFEACA2A, 0xFFF1D738,
		0xFFFABD40, 0xFFF9BC3F, 0xFFF9BD39, 0xFFFDC13D, 0xFFFFC739, 0xFFFFC739, 0xFFFDC42D, 0xFFF7BE27, 0xFFEAB519, 0xFFF3BE22, 0xFFF2C828, 0xFFF3C929, 0xFFEECE2E, 0xFFF7D737, 0xFFFCE243,
		0xFFF9C732, 0xFFF7C530, 0xFFF4C52D, 0xFFF6C72F, 0xFFF8CC2F, 0xFFFCD033, 0xFFFAD330, 0xFFFAD330, 0xFFE8C521, 0xFFEBC824, 0xFFE8CC2A, 0xFFEDD12F, 0xFFF4DE3D, 0xFFFEE847, 0xFFFAE848,
		0xFFFAC833, 0xFFF7C530, 0xFFF2C32B, 0xFFF1C22A, 0xFFF2C629, 0xFFF8CC2F, 0xFFFCD532, 0xFFFFDA37, 0xFFF4D12D, 0xFFF0CD29, 0xFFE8CC2A, 0xFFEFD331, 0xFFFCE645, 0xFFFFEF4E, 0xFFF6E444,
	};
	memcpy(save, data, sizeof(data));
}

// 获取鲁迪礼包像素信息
void PrintScreen::GetLuDiPixelData(int save[255])
{
	int data[] =
	{
		0xFF210E2A, 0xFF23102C, 0xFF220F2B, 0xFF1D0A26, 0xFF1A0822, 0xFF1C0A24, 0xFF1C0D24, 0xFF1C0D24, 0xFF3D2817, 0xFFB49F8E, 0xFF87766E, 0xFF3D2C24, 0xFF29211F, 0xFF2A2220, 0xFF373A33,
		0xFF200A21, 0xFF1F0920, 0xFF1D071C, 0xFF1D071C, 0xFF210F1F, 0xFF261424, 0xFF22121F, 0xFF1B0B18, 0xFF3E2914, 0xFFB7A28D, 0xFFAB998D, 0xFF4C3A2E, 0xFF1F1611, 0xFF281F1A, 0xFF333329,
		0xFF1D071E, 0xFF1E081F, 0xFF250F24, 0xFF2B152A, 0xFF221020, 0xFF160414, 0xFF170714, 0xFF22121F, 0xFF55402B, 0xFFA8937E, 0xFFAE9C90, 0xFF5A483C, 0xFF241B16, 0xFF241B16, 0xFF1F1F15,
		0xFF341F26, 0xFF1E0910, 0xFF160404, 0xFF210F0F, 0xFF1E0F0A, 0xFF130400, 0xFF201209, 0xFF3C2E25, 0xFF7F6E54, 0xFFB1A086, 0xFFB6A696, 0xFF695949, 0xFF2E251C, 0xFF2C231A, 0xFF1F1F13,
		0xFF220D14, 0xFF220D14, 0xFF2C1A1A, 0xFF301E1E, 0xFF1B0C07, 0xFF1A0B06, 0xFF574940, 0xFFA3958C, 0xFFB7A68C, 0xFFC6B59B, 0xFFAA9A8A, 0xFF524232, 0xFF160D04, 0xFF231A11, 0xFF252519,
		0xFF715F55, 0xFF453329, 0xFF291909, 0xFF423222, 0xFF746850, 0xFF968A72, 0xFF9E9578, 0xFF9D9477, 0xFFBDAE91, 0xFF9F9073, 0xFF6B5E4B, 0xFF3B2E1B, 0xFF1E160B, 0xFF2A2217, 0xFF2B2C1E,
		0xFF99877D, 0xFF98867C, 0xFF968676, 0xFF988878, 0xFFA0947C, 0xFFA89C84, 0xFFA39A7D, 0xFF9A9174, 0xFFAC9D80, 0xFF6F6043, 0xFF443724, 0xFF635643, 0xFF71695E, 0xFF665E53, 0xFF4D4E40,
		0xFFA08C69, 0xFF9C8865, 0xFF9D8A62, 0xFFA39068, 0xFFA29368, 0xFFA29368, 0xFFA79A6E, 0xFFAFA276, 0xFF9A8045, 0xFFB2985D, 0xFFB59D6F, 0xFFBAA274, 0xFFDDC9AE, 0xFFC7B398, 0xFF615642,
		0xFF9D8966, 0xFF9B8764, 0xFF9D8A62, 0xFFA49169, 0xFFA5966B, 0xFFA6976C, 0xFFA99C70, 0xFFB0A377, 0xFFBDA368, 0xFFC7AD72, 0xFFCFB789, 0xFFCBB385, 0xFFC0AC91, 0xFF8C785D, 0xFF3B301C,
		0xFF9F8D67, 0xFF9D8B65, 0xFF9F8E62, 0xFFA59468, 0xFFA89A6B, 0xFFA99B6C, 0xFFACA070, 0xFFB1A575, 0xFFC9B47D, 0xFFB5A069, 0xFFBAA47B, 0xFFB6A077, 0xFF8E7D63, 0xFF534228, 0xFF271C08,
		0xFFA89670, 0xFFA6946E, 0xFFA59468, 0xFFA8976B, 0xFFAA9C6D, 0xFFAD9F70, 0xFFAFA373, 0xFFB2A676, 0xFF9A854E, 0xFF68531C, 0xFF654F26, 0xFF6A542B, 0xFF4D3C22, 0xFF322107, 0xFF251A06,
		0xFFAB9C71, 0xFFAA9B70, 0xFFA89B67, 0xFFA89B67, 0xFFAEA16C, 0xFFB4A772, 0xFFB6AB73, 0xFFB6AB73, 0xFF6E5D31, 0xFF3E2D01, 0xFF3B2B09, 0xFF3F2F0D, 0xFF34260C, 0xFF392B11, 0xFF392F16,
		0xFFAB9C71, 0xFFAC9D72, 0xFFAC9F6B, 0xFFADA06C, 0xFFB4A772, 0xFFBBAE79, 0xFFBAAF77, 0xFFB6AB73, 0xFF67562A, 0xFF514014, 0xFF584826, 0xFF51411F, 0xFF413319, 0xFF4B3D23, 0xFF473D24,
		0xFFAB9D6E, 0xFFAFA172, 0xFFB4A56E, 0xFFB6A770, 0xFFBBAC71, 0xFFBEAF74, 0xFFB7A96C, 0xFFAC9E61, 0xFF5F512A, 0xFF594B24, 0xFF635433, 0xFF554625, 0xFF483A1F, 0xFF4F4126, 0xFF44391B,
		0xFFAEA071, 0xFFB5A778, 0xFFBBAC75, 0xFFBCAD76, 0xFFBEAF74, 0xFFBBAC71, 0xFFAD9F62, 0xFF9D8F52, 0xFF6A5C35, 0xFF62542D, 0xFF655635, 0xFF594A29, 0xFF594B30, 0xFF63553A, 0xFF554A2C,
	};
	memcpy(save, data, sizeof(data));
}

// 获取爱娜的项链像素信息
void PrintScreen::GetXiangLianPixelData(int save[255])
{
	int data[] =
	{
		0xFFA8A9BE, 0xFFB3B5C4, 0xFFDBDDEC, 0xFFE4E7EE, 0xFFDDE0E7, 0xFFDBDFE0, 0xFFF1F5F6, 0xFFF1F5F4, 0xFFDDE1E0, 0xFFCBCFCE, 0xFFDCE0DF, 0xFFFCFFFF, 0xFFF5F9F8, 0xFFFDFFFE, 0xFFF8FAF9,
		0xFFCECFE1, 0xFFA3A5B2, 0xFFBFC1CE, 0xFFE9ECF3, 0xFFF0F3FA, 0xFFF7FBFE, 0xFFFBFFFF, 0xFFECF0F1, 0xFFF9FDFE, 0xFFFCFFFF, 0xFFEAEEEF, 0xFFE4E8E9, 0xFFF6FAFB, 0xFFF1F2F4, 0xFFEBECEE,
		0xFFFCFDFF, 0xFFCED0DD, 0xFFAFB1BE, 0xFFCACDD4, 0xFFD8DBE2, 0xFFF5F9FC, 0xFFFCFFFF, 0xFFF1F5F6, 0xFFF4F8F9, 0xFFF7FBFC, 0xFFEEF2F3, 0xFFE3E7E8, 0xFFFCFFFF, 0xFFFEFFFF, 0xFFF4F5F7,
		0xFFDADBED, 0xFFC9CBD8, 0xFFE9EBF8, 0xFFDCDFE8, 0xFFB2B5BE, 0xFFBFC2C9, 0xFFE9ECF3, 0xFFFBFFFF, 0xFFFCFFFF, 0xFFF4F8FB, 0xFFFCFFFF, 0xFFF4F8F9, 0xFFF0F4F5, 0xFFF7F8FC, 0xFFF3F4F8,
		0xFFAFB0C2, 0xFFDCDEEB, 0xFFFCFEFF, 0xFFDDE0E9, 0xFFF5F8FF, 0xFFC5C8CF, 0xFFC8CBD2, 0xFFE3E7EA, 0xFFFCFFFF, 0xFFE7EBEE, 0xFFFCFFFF, 0xFFFAFEFF, 0xFFF9FDFE, 0xFFF4F5F9, 0xFFFAFBFF,
		0xFFE5E6FB, 0xFFDFE0F4, 0xFFF0F1FF, 0xFFF1F2FF, 0xFFE9EAFC, 0xFFFCFEFF, 0xFFD4D6E2, 0xFFABAEB5, 0xFFD2D5DC, 0xFFF9FDFF, 0xFFF7FBFE, 0xFFF8FCFD, 0xFFEFF3F4, 0xFFF0F1F6, 0xFFFEFFFF,
		0xFFD9DAEF, 0xFFC4C5D9, 0xFFD1D2E6, 0xFFD5D6E8, 0xFFCACBDD, 0xFFA8AAB6, 0xFFC7C9D5, 0xFF898C93, 0xFFACAFB6, 0xFFF0F4F7, 0xFFFAFEFF, 0xFFFCFFFF, 0xFFFCFFFF, 0xFFF9FAFF, 0xFFE5E6EB,
		0xFFC5C4E4, 0xFF9D9CBB, 0xFFB0AFCE, 0xFFC3C3DD, 0xFFBFBFD9, 0xFFA9AABE, 0xFFBEBFD3, 0xFF858793, 0xFFCED0DC, 0xFFFCFFFF, 0xFFEDF1F4, 0xFFEFF3F2, 0xFFF8FCFB, 0xFFF3F3FB, 0xFFE7E7EF,
		0xFFA1A0C0, 0xFF706F8E, 0xFF8B8AA9, 0xFFB5B5CF, 0xFFC6C6E0, 0xFFBDBED2, 0xFF9697AB, 0xFF8F919D, 0xFFF2F4FF, 0xFFFCFFFF, 0xFFF9FDFF, 0xFFF7FBFA, 0xFFE7EBEA, 0xFFD8D8E0, 0xFFCECED6,
		0xFF827FAA, 0xFF535179, 0xFF6A6890, 0xFF9998BA, 0xFFBFBEE0, 0xFFCFCFE9, 0xFFA0A0BA, 0xFFC2C4D1, 0xFFEDEFFC, 0xFFE4E8EB, 0xFFF1F5F8, 0xFFB8BDB9, 0xFF828783, 0xFF71717B, 0xFFB4B4BE,
		0xFF8683AE, 0xFF636189, 0xFF65638B, 0xFF807FA1, 0xFFB6B5D7, 0xFF9C9CB6, 0xFF8C8CA6, 0xFFDADCE9, 0xFFF5F7FF, 0xFFFCFFFF, 0xFFE9EDF0, 0xFF848985, 0xFF676C68, 0xFF3E3E48, 0xFF474751,
		0xFF9894C7, 0xFF8582B1, 0xFF6F6C9B, 0xFF706E96, 0xFFB2B0D8, 0xFFB2B1D0, 0xFFA09FBE, 0xFFF7F9FF, 0xFFF6F8FF, 0xFFDBDFE2, 0xFF95999C, 0xFF575C56, 0xFF4F544E, 0xFF43434D, 0xFF44444E,
		0xFF9894C7, 0xFF928FBE, 0xFF6F6C9B, 0xFF615F87, 0xFFACAAD2, 0xFFC3C2E1, 0xFFAAA9C8, 0xFFF6F8FF, 0xFFBCBECD, 0xFF686C6F, 0xFF45494C, 0xFF6E736D, 0xFF4F544E, 0xFF777781, 0xFF6F6F79,
		0xFF9D94C9, 0xFF9189BA, 0xFF968EBF, 0xFF605982, 0xFF665F88, 0xFFB1ACCC, 0xFFE3DEFE, 0xFFAFABC4, 0xFF6E6A83, 0xFF5F5C6F, 0xFF646174, 0xFF716E7F, 0xFF625F70, 0xFF595F5F, 0xFF535959,
		0xFFBEB5EA, 0xFFA098C9, 0xFF706899, 0xFF625B84, 0xFF78719A, 0xFF827D9D, 0xFF847F9F, 0xFF77738C, 0xFF817D96, 0xFF858295, 0xFF666376, 0xFF5D5A6B, 0xFF6C697A, 0xFF555B5B, 0xFF5A6060,
	};
	memcpy(save, data, sizeof(data));
}

// 获取是否在副本像素信息[截取地图名称第一个字]
void PrintScreen::GetInFBPiexlData(int save[255])
{
	int data[] =
	{
		0xFF11363E, 0xFF12373F, 0xFF12373F, 0xFF12373F, 0xFF143941, 0xFF758072, 0xFF7C8576, 0xFF133840, 0xFF133840, 0xFF143941, 0xFF143941, 0xFF153A42, 0xFF163841, 0xFF173942, 0xFF183A43,
		0xFF061215, 0xFF12373F, 0xFF133840, 0xFF133840, 0xFF163B43, 0xFF536761, 0xFFDBCBA6, 0xFF353F3A, 0xFF12373F, 0xFF133840, 0xFF143941, 0xFF153A42, 0xFF9B9B86, 0xFFDDCCA7, 0xFFDDCCA7,
		0xFF051315, 0xFF113A40, 0xFF113A40, 0xFF113A40, 0xFF113A40, 0xFF113A40, 0xFF9B9880, 0xFF474236, 0xFF0E2F33, 0xFF123B41, 0xFF123B41, 0xFF123B41, 0xFF183D45, 0xFF091518, 0xFF7D735E,
		0xFF051315, 0xFF113A40, 0xFFC4BA9A, 0xFFDDCCA7, 0xFFDDCCA7, 0xFFDDCCA7, 0xFFDDCCA7, 0xFFDDCCA7, 0xFFDDCCA7, 0xFFDDCCA7, 0xFFDDCCA7, 0xFF305151, 0xFF183D45, 0xFF193E46, 0xFF898F7E,
		0xFFDDCCA7, 0xFF979A84, 0xFF113941, 0xFF020708, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF15353D, 0xFF1A3F48, 0xFF898F7E,
		0xFF000000, 0xFF000000, 0xFF0B181A, 0xFFB9B295, 0xFF3E5A58, 0xFF133B43, 0xFF143C44, 0xFF153D45, 0xFF60726A, 0xFFB7B194, 0xFF1A4148, 0xFF173F47, 0xFF1A3F48, 0xFF1B4049, 0xFF898F7F,
		0xFF061215, 0xFF1F4248, 0xFF133942, 0xFFB5AF93, 0xFF686353, 0xFF102E35, 0xFF153B44, 0xFF163C45, 0xFF909481, 0xFFADA68B, 0xFF050C0E, 0xFF193E47, 0xFF828A7B, 0xFFDDCCA7, 0xFFDDCCA7,
		0xFF6A6959, 0xFFBFB698, 0xFF14373F, 0xFF858C7B, 0xFF9D937A, 0xFF0B1F24, 0xFF143A43, 0xFF163C45, 0xFFBFB799, 0xFF727161, 0xFF060F11, 0xFF193F48, 0xFF1B4049, 0xFF0D1E23, 0xFF7D735E,
		0xFF4C4D44, 0xFF102227, 0xFF03080A, 0xFF586A65, 0xFFD0C19F, 0xFF071115, 0xFF153945, 0xFF2A4950, 0xFFDDCCA7, 0xFF34342D, 0xFF0D1F25, 0xFF1A3E4A, 0xFF1E404C, 0xFF1F414D, 0xFF8B9080,
		0xFF030709, 0xFF0E262F, 0xFF153843, 0xFF2E4B51, 0xFFDDCCA7, 0xFF24231E, 0xFF143844, 0xFF5C6D68, 0xFFCDC09F, 0xFF030202, 0xFF143039, 0xFF193D49, 0xFF1E404C, 0xFF1F414D, 0xFF8B9081,
		0xFF081317, 0xFF193B47, 0xFF143844, 0xFF0E323E, 0xFFCEC19F, 0xFF524C3E, 0xFF10323A, 0xFF939783, 0xFF908F7A, 0xFF010505, 0xFF113C45, 0xFF123E47, 0xFF193F48, 0xFF1B414A, 0xFF89907F,
		0xFF040F13, 0xFF183A46, 0xFF1B3F4B, 0xFF193D49, 0xFF9E9F88, 0xFF5F594A, 0xFF0C252B, 0xFFCABE9E, 0xFF4C5147, 0xFF07161A, 0xFF123E47, 0xFF123E47, 0xFF23464C, 0xFF4C6461, 0xFFACA990,
		0xFF081316, 0xFF143640, 0xFF10353E, 0xFF10353E, 0xFF133942, 0xFF061215, 0xFF374541, 0xFFD8C9A5, 0xFF0D100E, 0xFF0D282E, 0xFF123D44, 0xFF133E45, 0xFF969883, 0xFFABA78D, 0xFF797E6E,
		0xFF061115, 0xFFA8A58D, 0xFFDDCCA7, 0xFFDDCCA7, 0xFFDDCCA7, 0xFFDDCCA7, 0xFFDDCCA7, 0xFFDDCCA7, 0xFFDDCCA7, 0xFFDDCCA7, 0xFFDDCCA7, 0xFFABA88E, 0xFF133840, 0xFF071518, 0xFF060F11,
		0xFF010D11, 0xFF082A34, 0xFF050E11, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF000000, 0xFF050E10, 0xFF163841, 0xFF173943,
	};
	memcpy(save, data, sizeof(data));
}

// 获取地图打开像素信息
void PrintScreen::GetMapOpenPiexlData(int save[255])
{
	int data[] = {
		0xFF185073, 0xFF195174, 0xFF1D5178, 0xFF1D5178, 0xFF1A5A7D, 0xFF1B5B7E, 0xFF195E7F, 0xFF1B6081, 0xFF196483, 0xFF1B6685, 0xFF186986, 0xFF196A87, 0xFF18728C, 0xFF1A748E, 0xFF177A91,
		0xFF105370, 0xFF175A77, 0xFF165773, 0xFF0F506C, 0xFF0B5F79, 0xFF0C607A, 0xFF0D637C, 0xFF0F657E, 0xFF0E6882, 0xFF106A84, 0xFF0D6D85, 0xFF0E6E86, 0xFF0C7289, 0xFF0E748B, 0xFF0D778D,
		0xFF1E617E, 0xFF145774, 0xFF135470, 0xFF1F607C, 0xFF0D617B, 0xFF0D617B, 0xFF0E647D, 0xFF10667F, 0xFF0F6983, 0xFF116B85, 0xFF0E6E86, 0xFF0F6F87, 0xFF0E748B, 0xFF0F758C, 0xFF0E788E,
		0xFF024361, 0xFF0D4E6C, 0xFF165672, 0xFF195975, 0xFF105D79, 0xFF105D79, 0xFF105F7D, 0xFF12617F, 0xFF116581, 0xFF136783, 0xFF126985, 0xFF136A86, 0xFF116F89, 0xFF12708A, 0xFF10748E,
		0xFF084967, 0xFF0E4F6D, 0xFF155571, 0xFF13536F, 0xFF105D79, 0xFF115E7A, 0xFF105F7D, 0xFF12617F, 0xFF116581, 0xFF136783, 0xFF126985, 0xFF136A86, 0xFF13718B, 0xFF14728C, 0xFF127690,
		0xFF246480, 0xFF0B4B67, 0xFF084562, 0xFF13506D, 0xFF17597B, 0xFF185A7C, 0xFF175C7D, 0xFF195E7F, 0xFF186182, 0xFF1A6384, 0xFF196585, 0xFF1A6686, 0xFF1E6E8F, 0xFF1E6E8F, 0xFF1C7293,
		0xFF0F4F6B, 0xFF175773, 0xFF1A5774, 0xFF175471, 0xFF0C4E70, 0xFF0D4F71, 0xFF0C5172, 0xFF0E5374, 0xFF0D5677, 0xFF0F5879, 0xFF0E5A7A, 0xFF0F5B7B, 0xFF126283, 0xFF126283, 0xFF0F6586,
		0xFF114E6B, 0xFF33708D, 0xFF326D8B, 0xFF175270, 0xFF053F65, 0xFF064066, 0xFF064169, 0xFF08436B, 0xFF08466D, 0xFF0A486F, 0xFF0A4B73, 0xFF0A4B73, 0xFF0A4F76, 0xFF0A4F76, 0xFF085279,
		0xFF367390, 0xFF296683, 0xFF0E4967, 0xFF003351, 0xFF043E64, 0xFF053F65, 0xFF054068, 0xFF07426A, 0xFF07456C, 0xFF09476E, 0xFF094A72, 0xFF094A72, 0xFF064B72, 0xFF074C73, 0xFF044E75,
		0xFF164E71, 0xFF00375A, 0xFF003458, 0xFF073D61, 0xFF063B67, 0xFF073C68, 0xFF083D69, 0xFF093E6A, 0xFF07406B, 0xFF08416C, 0xFF08436F, 0xFF08436F, 0xFF084772, 0xFF084772, 0xFF084874,
		0xFF01395C, 0xFF003154, 0xFF003357, 0xFF043A5E, 0xFF033864, 0xFF043965, 0xFF053A66, 0xFF063B67, 0xFF043D68, 0xFF053E69, 0xFF05406C, 0xFF05406C, 0xFF04436E, 0xFF05446F, 0xFF044470,
		0xFF002F57, 0xFF00345C, 0xFF04355E, 0xFF063760, 0xFF023665, 0xFF033766, 0xFF033967, 0xFF043A68, 0xFF053B69, 0xFF063C6A, 0xFF043E6C, 0xFF053F6D, 0xFF03406F, 0xFF044170, 0xFF034170,
		0xFF02375F, 0xFF053A62, 0xFF05365F, 0xFF02335C, 0xFF043867, 0xFF043867, 0xFF043A68, 0xFF053B69, 0xFF073D6B, 0xFF083E6C, 0xFF06406E, 0xFF06406E, 0xFF044170, 0xFF044170, 0xFF034170,
		0xFF043766, 0xFF003362, 0xFF002E5F, 0xFF012F60, 0xFF013968, 0xFF013968, 0xFF023A69, 0xFF033B6A, 0xFF043E6C, 0xFF053F6D, 0xFF044170, 0xFF044170, 0xFF034170, 0xFF034170, 0xFF024272,
		0xFF013463, 0xFF002F5E, 0xFF033162, 0xFF0A3869, 0xFF003766, 0xFF003867, 0xFF013968, 0xFF023A69, 0xFF023C6A, 0xFF033D6B, 0xFF023F6E, 0xFF03406F, 0xFF02406F, 0xFF02406F, 0xFF014171,
	};
	memcpy(save, data, sizeof(data));
}

// 获取弹框确定按钮像素信息
void PrintScreen::GetSureBtnPiexlData(int save[255])
{
	int data[] =
	{
		0xFF624734, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F,
		0xFF624734, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F,
		0xFF624734, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F,
		0xFF624734, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F,
		0xFF624734, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F,
		0xFF624734, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F, 0xFF5E4A2F,
		0xFF624A32, 0xFF5F4C2E, 0xFF5F4C2E, 0xFF5F4C2E, 0xFF5F4C2E, 0xFF5F4C2E, 0xFF5F4C2E, 0xFF5F4C2E, 0xFF5F4C2E, 0xFF5F4C2E, 0xFF5F4C2E, 0xFF5F4C2E, 0xFF5F4C2E, 0xFF5F4C2E, 0xFF5F4C2E,
		0xFF624A32, 0xFF5F4C2E, 0xFF5F4C2E, 0xFF5F4C2E, 0xFF5F4C2E, 0xFF5F4C2E, 0xFF5F4C2E, 0xFF5F4C2E, 0xFF5F4C2E, 0xFF5F4C2E, 0xFF5F4C2E, 0xFF5F4C2E, 0xFF5F4C2E, 0xFF5F4C2E, 0xFF5F4C2E,
		0xFF644A31, 0xFF604D2D, 0xFF604D2D, 0xFF604D2D, 0xFF604D2D, 0xFF604D2D, 0xFF604D2D, 0xFF604D2D, 0xFF604D2D, 0xFF604D2D, 0xFF604D2D, 0xFF604D2D, 0xFF604D2D, 0xFF604D2D, 0xFF604D2D,
		0xFF654B32, 0xFF614E2E, 0xFF614E2E, 0xFF614E2E, 0xFF614E2E, 0xFF614E2E, 0xFF614E2E, 0xFF614E2E, 0xFF614E2E, 0xFF614E2E, 0xFF614E2E, 0xFF614E2E, 0xFF614E2E, 0xFF614E2E, 0xFF614E2E,
		0xFF654B32, 0xFF624E2D, 0xFF624E2D, 0xFF624E2D, 0xFF624E2D, 0xFF624E2D, 0xFF624E2D, 0xFF624E2D, 0xFF624E2D, 0xFF624E2D, 0xFF624E2D, 0xFF624E2D, 0xFF624E2D, 0xFF624E2D, 0xFF624E2D,
		0xFF664C33, 0xFF634F2E, 0xFF634F2E, 0xFF634F2E, 0xFF634F2E, 0xFF634F2E, 0xFF634F2E, 0xFF634F2E, 0xFF634F2E, 0xFF634F2E, 0xFF634F2E, 0xFF634F2E, 0xFF634F2E, 0xFF634F2E, 0xFF634F2E,
		0xFF684D32, 0xFF64502D, 0xFF64502D, 0xFF64502D, 0xFF64502D, 0xFF64502D, 0xFF64502D, 0xFF64502D, 0xFF64502D, 0xFF64502D, 0xFF64502D, 0xFF64502D, 0xFF64502D, 0xFF64502D, 0xFF64502D,
		0xFF684D32, 0xFF64502D, 0xFF64502D, 0xFF64502D, 0xFF64502D, 0xFF64502D, 0xFF64502D, 0xFF64502D, 0xFF64502D, 0xFF64502D, 0xFF64502D, 0xFF64502D, 0xFF64502D, 0xFF64502D, 0xFF64502D,
		0xFF684D32, 0xFF68522D, 0xFF68522D, 0xFF68522D, 0xFF68522D, 0xFF68522D, 0xFF68522D, 0xFF68522D, 0xFF68522D, 0xFF68522D, 0xFF68522D, 0xFF68522D, 0xFF69532E, 0xFF69532E, 0xFF6A542F,
	};
	memcpy(save, data, sizeof(data));
}

// 获取登录按钮像数信息
void PrintScreen::GetCanLoginPiexlData(int save[255])
{
	int data[] =
	{
		0xFFEEEAC7, 0xFFEBE7C4, 0xFFE2DFB6, 0xFFE6E3BA, 0xFFEDEABF, 0xFFE8E5BA, 0xFFEDE6B2, 0xFFE9E2AE, 0xFFE9E1B0, 0xFFEDE5B4, 0xFFEBE3B5, 0xFFE7DFB1, 0xFFE9E0B7, 0xFFF0E7BE, 0xFFF1E7C3,
		0xFFEAE1B8, 0xFFF6EDC4, 0xFFF2E5B8, 0xFFE9DCAF, 0xFFF7E6B8, 0xFFEFDEB0, 0xFFEBDBA0, 0xFFF5E5AA, 0xFFEEE1AA, 0xFFE9DCA5, 0xFFEEE4B1, 0xFFF0E6B3, 0xFFEAE3B7, 0xFFEDE6BA, 0xFFECE4C0,
		0xFFE5DCB3, 0xFFF0E7BE, 0xFFF0E3B6, 0xFFE9DCAF, 0xFFF6E5B7, 0xFFEEDDAF, 0xFFF1E1A6, 0xFFF4E4A9, 0xFFECDFA8, 0xFFE8DBA4, 0xFFEAE0AD, 0xFFEBE1AE, 0xFFE6DFB3, 0xFFE9E2B6, 0xFFEDE5C1,
		0xFFEBE1BD, 0xFFF0E6C2, 0xFFF0E3B7, 0xFFE8DBAF, 0xFFF1E0B4, 0xFFE8D7AB, 0xFFEDDCA4, 0xFFEEDDA5, 0xFFECDFAA, 0xFFEEE1AC, 0xFFEDE2B4, 0xFFEBE0B2, 0xFFE9E2B8, 0xFFEDE6BC, 0xFFF1E9C5,
		0xFFEEE4C0, 0xFFECE2BE, 0xFFEEE1B5, 0xFFE8DBAF, 0xFFEFDEB2, 0xFFE7D6AA, 0xFFE9D8A0, 0xFFE9D8A0, 0xFFEEE1AC, 0xFFF3E6B1, 0xFFEBE0B2, 0xFFE8DDAF, 0xFFEAE3B9, 0xFFECE5BB, 0xFFECE4C0,
		0xFFECE1C1, 0xFFE6DBBB, 0xFFEBDDB6, 0xFFE8DAB3, 0xFFF0DFB4, 0xFFECDBB0, 0xFFEDDBA9, 0xFFEAD8A6, 0xFFEFE1B2, 0xFFEEE0B1, 0xFFE0D4AA, 0xFFE4D8AE, 0xFFECE4BF, 0xFFE9E1BC, 0xFFCCC3A2,
		0xFFF2E7C7, 0xFFE9DEBE, 0xFFEDDFB8, 0xFFE8DAB3, 0xFFEDDCB1, 0xFFEAD9AE, 0xFFF0DEAC, 0xFFE9D7A5, 0xFFECDEAF, 0xFFEADCAD, 0xFFE0D4AA, 0xFFF0E4BA, 0xFFF7EFCA, 0xFFE2DAB5, 0xFF99906F,
		0xFFEFE4C6, 0xFFE8DDBF, 0xFFEEE0B9, 0xFFE7D9B2, 0xFFE9D8AD, 0xFFE7D6AB, 0xFFEDDBAB, 0xFFE5D3A3, 0xFFEADCAF, 0xFFEBDDB0, 0xFFE5D9B3, 0xFFF6EAC4, 0xFFE4DBBA, 0xFFABA281, 0xFF696248,
		0xFFDBD0B2, 0xFFDDD2B4, 0xFFEADCB5, 0xFFE8DAB3, 0xFFEBDAAF, 0xFFEBDAAF, 0xFFEDDBAB, 0xFFE6D4A4, 0xFFECDEB1, 0xFFEDDFB2, 0xFFE4D8B2, 0xFFE7DBB5, 0xFFB4AB8A, 0xFF595137, 0xFF585036,
		0xFF827961, 0xFFE6DBBF, 0xFFF0E2BB, 0xFFE1D3AC, 0xFFEAD9AD, 0xFFE8D7AB, 0xFFE6D4A2, 0xFFEAD8A6, 0xFFDCCEA1, 0xFFF4E6B9, 0xFFE9DCB9, 0xFFBEB18E, 0xFF57503A, 0xFF37311B, 0xFF544A36,
		0xFF514730, 0xFFBEB397, 0xFFEDDFB8, 0xFFE8DAB3, 0xFFE8D7AB, 0xFFDECDA1, 0xFFEFDDAB, 0xFFEBD9A7, 0xFFDFD1A4, 0xFFE9DBAE, 0xFFDBCEAB, 0xFF6C6042, 0xFF322C1A, 0xFF49422F, 0xFF4B4431,
		0xFF372A15, 0xFF8D856B, 0xFFD7CA9E, 0xFFDBCEA2, 0xFFE6D6A3, 0xFFEADAA7, 0xFFE3D29C, 0xFFE7D6A0, 0xFFE4D6A7, 0xFFE5D7A8, 0xFFE2D5B2, 0xFF5A4F30, 0xFF2A231A, 0xFF534B3B, 0xFF41392D,
		0xFF322714, 0xFF877D64, 0xFFE0D3A7, 0xFFEADDB1, 0xFFE8D8A5, 0xFFDCCC99, 0xFFDCCB95, 0xFFEBDAA4, 0xFFE6D8A9, 0xFFDDCFA0, 0xFFD9CCA9, 0xFF786C4E, 0xFF332B1A, 0xFF322818, 0xFF453D30,
		0xFF7F7559, 0xFFC8BD9D, 0xFFE8DCAC, 0xFFDACE9E, 0xFFDFD099, 0xFFE1D29B, 0xFFDDCD91, 0xFFE7D79B, 0xFFE0D39F, 0xFFE4D7A3, 0xFFD7CAA7, 0xFFC8BB98, 0xFF79705A, 0xFF463F2E, 0xFF3C352A,
		0xFFE6DBBB, 0xFFEDE2C2, 0xFFE0D4A4, 0xFFC7BB8B, 0xFFDACB94, 0xFFEADBA4, 0xFFE1D195, 0xFFDDCD91, 0xFFD7CA96, 0xFFECDFAB, 0xFFDDD0AD, 0xFFF7EAC7, 0xFFD9CFB6, 0xFFAFA58C, 0xFF61584B,
	};
	memcpy(save, data, sizeof(data));
}

// 获取社交图标像数信息
void PrintScreen::GetInTeamFlagPiexlData(int save[255])
{
	int data[] =
	{
		0xFF414C56, 0xFF333C45, 0xFF5F676F, 0xFFBEC7C7, 0xFF6F7776, 0xFF313A36, 0xFF363F47, 0xFF3A434B, 0xFF394148, 0xFF384047, 0xFF363E45, 0xFF353D45, 0xFF353C44, 0xFF353B43, 0xFF333A42,
		0xFF3E4751, 0xFF363F46, 0xFF283037, 0xFFC1C9C7, 0xFFEEF6F4, 0xFF6B736C, 0xFF3A423A, 0xFF323A41, 0xFF353D44, 0xFF343C42, 0xFF343B41, 0xFF333B41, 0xFF31373E, 0xFF2E3237, 0xFF2A2E32,
		0xFF3B444D, 0xFF3A424A, 0xFF2D343B, 0xFF60675F, 0xFFC4CAC2, 0xFFF0F7E7, 0xFF434938, 0xFF2C2E2D, 0xFF333A3C, 0xFF32393F, 0xFF2E343A, 0xFF2D2D2A, 0xFF423F2F, 0xFF4C4A2D, 0xFF716E51,
		0xFF374047, 0xFF373F46, 0xFF343B41, 0xFF2F342D, 0xFFBABFB6, 0xFFB3B9A7, 0xFFAAAF9D, 0xFF4D4E3D, 0xFF272B30, 0xFF25272B, 0xFF211F21, 0xFF868372, 0xFFE0DCCB, 0xFFE1DEC0, 0xFFE2DFC1,
		0xFF353D44, 0xFF343B42, 0xFF333A40, 0xFF24282C, 0xFF898D81, 0xFFD3D4C0, 0xFFE6E7D2, 0xFF49482B, 0xFF2B2920, 0xFF8B8660, 0xFFEAE4BF, 0xFFF5EEBE, 0xFFDAD1A1, 0xFFF5EAAF, 0xFFEADFA5,
		0xFF333A41, 0xFF32393E, 0xFF30373C, 0xFF272C2A, 0xFF484B3E, 0xFFD4D4BF, 0xFFB2B29D, 0xFF6E6C4E, 0xFF8E8C6E, 0xFFEBE5BF, 0xFFE6E0B9, 0xFFF2E9B8, 0xFFEFE6B4, 0xFFE3D79C, 0xFFEFE3A7,
		0xFF30373D, 0xFF30363B, 0xFF2F353A, 0xFF2D3337, 0xFF1F2226, 0xFF27261E, 0xFFB7B6A1, 0xFFEBE5C0, 0xFFEDE7C2, 0xFFDED59C, 0xFFD5CC93, 0xFFDCCF86, 0xFFEADE95, 0xFFDFCD7C, 0xFFD7C573,
		0xFF2F3539, 0xFF2E3438, 0xFF2D3236, 0xFF2C3236, 0xFF2B3034, 0xFF222223, 0xFF797762, 0xFFDDD7B1, 0xFFE4DEB8, 0xFFD5CB91, 0xFFE0D69C, 0xFFE0D389, 0xFFE7DA90, 0xFFE4D27F, 0xFFCCBA66,
		0xFF2D3338, 0xFF2C3135, 0xFF2B3033, 0xFF2B3033, 0xFF2A2E32, 0xFF272A2E, 0xFF2F2E23, 0xFFBDB58F, 0xFFDED6B0, 0xFFE1D493, 0xFFF3E5A4, 0xFFE3D17B, 0xFFDECB75, 0xFFE2CA70, 0xFFC7AF54,
		0xFF2B3035, 0xFF2A2F34, 0xFF2A2F33, 0xFF292E31, 0xFF292C30, 0xFF292C30, 0xFF1D1C20, 0xFF827A55, 0xFFD4CBA5, 0xFFE9DB99, 0xFFEFE19E, 0xFFDECB74, 0xFFDAC76F, 0xFFDCC469, 0xFFC7AE53,
		0xFF2A2F33, 0xFF292E32, 0xFF282D30, 0xFF282D30, 0xFF282B2F, 0xFF272A2E, 0xFF232529, 0xFF393218, 0xFFB3AA8C, 0xFFE1D390, 0xFFDCCE8B, 0xFFE1CB73, 0xFFE9D37A, 0xFFDDBF65, 0xFFCBAD53,
		0xFF292D31, 0xFF282D31, 0xFF282C2F, 0xFF282C2F, 0xFF272A2E, 0xFF26292C, 0xFF26292C, 0xFF1D171B, 0xFF756B4C, 0xFFDBCD8A, 0xFFDBCC89, 0xFFE8D279, 0xFFE8D278, 0xFFD2B459, 0xFFC6A84D,
		0xFF282C30, 0xFF272B2F, 0xFF272B2D, 0xFF272B2D, 0xFF26292C, 0xFF25282B, 0xFF25282B, 0xFF222225, 0xFF2F2612, 0xFFBFB06E, 0xFFDFD08E, 0xFFEAD47A, 0xFFDAC46A, 0xFFC9A950, 0xFFC2A248,
		0xFF262A2E, 0xFF262A2E, 0xFF262A2D, 0xFF25292C, 0xFF25292B, 0xFF25272A, 0xFF24272A, 0xFF24272A, 0xFF1A1416, 0xFF8A7B39, 0xFFD4C582, 0xFFEAD378, 0xFFD5BE63, 0xFFD0B056, 0xFFC2A147,
		0xFF262A2D, 0xFF25292C, 0xFF25282B, 0xFF24282B, 0xFF25282A, 0xFF24272A, 0xFF242629, 0xFF232528, 0xFF1F2123, 0xFF11100F, 0xFFB9B797, 0xFFD9CF6F, 0xFFCDC464, 0xFFC2AB38, 0xFFB7A02E,
	};
	memcpy(save, data, sizeof(data));
}


void PrintScreen::GetInFBFlagPiexlData(int save[255])
{
	int data[] =
	{
		0xFF414C56, 0xFF404A54, 0xFF3F4952, 0xFF3E4851, 0xFF3C464F, 0xFF3B444C, 0xFF3A434B, 0xFF3A434B, 0xFF394148, 0xFF384047, 0xFF363E45, 0xFF353D45, 0xFF353C44, 0xFF353B43, 0xFF333A42,
		0xFF3E4751, 0xFF3C454D, 0xFF3A434B, 0xFF3A434A, 0xFF39424A, 0xFF384148, 0xFF373F46, 0xFF363E45, 0xFF353D44, 0xFF343C42, 0xFF343B41, 0xFF333B41, 0xFF333A40, 0xFF32383F, 0xFF31373E,
		0xFF3B444D, 0xFF3A424A, 0xFF384047, 0xFF373F46, 0xFF373F45, 0xFF353D44, 0xFF353C42, 0xFF343C42, 0xFF333A40, 0xFF32393F, 0xFF32393E, 0xFF31373C, 0xFF30373C, 0xFF30363B, 0xFF2F353A,
		0xFF374047, 0xFF373F46, 0xFF363E44, 0xFF343C42, 0xFF333B40, 0xFF333A40, 0xFF32393F, 0xFF31383D, 0xFF31373C, 0xFF30363B, 0xFF2F353A, 0xFF2F343A, 0xFF2E3338, 0xFF2D3237, 0xFF2D3237,
		0xFF353D44, 0xFF343B42, 0xFF333A40, 0xFF32393F, 0xFF32393E, 0xFF30363C, 0xFF30353B, 0xFF30353B, 0xFF2F3439, 0xFF2E3338, 0xFF2E3238, 0xFF2D3237, 0xFF2C3136, 0xFF2C3035, 0xFF2B3034,
		0xFF333A41, 0xFF32393E, 0xFF30373C, 0xFF2E3237, 0xFF2B2F34, 0xFF272931, 0xFF22232C, 0xFF1B2224, 0xFF151C1E, 0xFF131C1C, 0xFF1F2923, 0xFF252937, 0xFF2B2F33, 0xFF2A2E33, 0xFF2A2D32,
		0xFF30373D, 0xFF30363B, 0xFF282D2C, 0xFF515520, 0xFF737632, 0xFF9C9D61, 0xFFADAF71, 0xFFCAD881, 0xFFDCEA93, 0xFFDDEEA5, 0xFFBACB82, 0xFF1F2129, 0xFF292D31, 0xFF282C30, 0xFF282B2F,
		0xFF2F3539, 0xFF2D322E, 0xFF7B7E6C, 0xFFE6E9A4, 0xFFE2E59E, 0xFFE4E5A6, 0xFFEAEAAB, 0xFFD4E28A, 0xFFE8F69D, 0xFFEAFAB0, 0xFFB8C97E, 0xFF13151E, 0xFF282B2F, 0xFF272B2E, 0xFF272A2D,
		0xFF2D3338, 0xFF282C2F, 0xFF5D5C51, 0xFFEBE8A3, 0xFFE2DF99, 0xFFE3DEA0, 0xFFE6E0A2, 0xFFEDF19F, 0xFFB3B765, 0xFF727B3C, 0xFF434B13, 0xFF1E1F26, 0xFF26292D, 0xFF232224, 0xFF191518,
		0xFF2B3035, 0xFF2A2F34, 0xFF202225, 0xFF9D9A54, 0xFF95914B, 0xFF9D9859, 0xFF969052, 0xFF3B3F14, 0xFF1B1F17, 0xFF19201E, 0xFF232728, 0xFF25282B, 0xFF212328, 0xFF615949, 0xFFBCB4A3,
		0xFF2A2F33, 0xFF282B2F, 0xFF1D1F21, 0xFF211D19, 0xFF544D14, 0xFF9B8C56, 0xFFD3C48E, 0xFFE0DB98, 0xFFC2BC79, 0xFF9A9A5E, 0xFF2D2D10, 0xFF1D1C1E, 0xFF1C1A1C, 0xFF9D9761, 0xFFDCD6A0,
		0xFF292D31, 0xFF232521, 0xFF919172, 0xFFCFC97A, 0xFFE8E191, 0xFFE4D59E, 0xFFC1B17B, 0xFFCDC884, 0xFFD3CD89, 0xFFDCDCA0, 0xFFBCBB7F, 0xFF1B1212, 0xFF201C1D, 0xFF7E7842, 0xFFDBD59F,
		0xFF212628, 0xFF55571C, 0xFFCDCF94, 0xFFDBD46C, 0xFFC5BD55, 0xFF3C2910, 0xFF342110, 0xFFDFD486, 0xFFD4C87A, 0xFFCAC67B, 0xFF736F24, 0xFF1E1A1C, 0xFF221D1A, 0xFF92902D, 0xFFD3D16D,
		0xFF252A2A, 0xFF3C3E12, 0xFFC3C589, 0xFFDAD36A, 0xFFC5BD54, 0xFFA9964F, 0xFFD9C67E, 0xFFCABE70, 0xFFD2C778, 0xFFA5A156, 0xFF232113, 0xFF232527, 0xFF1B1719, 0xFF918F2B, 0xFFC6C560,
		0xFF262A2D, 0xFF1E1C1C, 0xFF7B745D, 0xFFCCBB6D, 0xFFD7C778, 0xFFCCB180, 0xFFD3B887, 0xFFD2BC89, 0xFFC7B27E, 0xFF52421B, 0xFF201D1E, 0xFF232527, 0xFF1D1719, 0xFF817339, 0xFFD3C68C,
	};
	memcpy(save, data, sizeof(data));
}

// 释放
void PrintScreen::Release()
{
	if (m_hScreen)
		DeleteObject(m_hScreen);

	m_hScreen = NULL;
}
